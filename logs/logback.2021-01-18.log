2021/01/18-15:04:11 [main] INFO  com.tuozhi.zhlw.admin.MyApplication-[55] Starting MyApplication on tz002-PC with PID 9332 (D:\JCAPP\cd-jcApp\cd-zhlw-web-admin\target\classes started by tz008 in D:\JCAPP\cd-jcApp)
2021/01/18-15:04:11 [main] DEBUG com.tuozhi.zhlw.admin.MyApplication-[56] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2021/01/18-15:04:11 [main] INFO  com.tuozhi.zhlw.admin.MyApplication-[655] The following profiles are active: dev
2021/01/18-15:04:13 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[249] Multiple Spring Data modules found, entering strict repository configuration mode!
2021/01/18-15:04:13 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[127] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021/01/18-15:04:13 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[187] Finished Spring Data repository scanning in 77ms. Found 3 JPA repository interfaces.
2021/01/18-15:04:13 [main] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner-[239] Skipping MapperFactoryBean with name 'workFlowNodeMapper' and 'com.tuozhi.zhlw.admin.jc.mapper.WorkFlowNodeMapper' mapperInterface. Bean already defined with the same name!
2021/01/18-15:04:13 [main] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner-[166] No MyBatis mapper was found in '[com.tuozhi.zhlw.admin]' package. Please check your configuration.
2021/01/18-15:04:13 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[249] Multiple Spring Data modules found, entering strict repository configuration mode!
2021/01/18-15:04:13 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[127] Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2021/01/18-15:04:13 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport-[348] Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tuozhi.zhlw.admin.dao.SysAppDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2021/01/18-15:04:13 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport-[348] Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tuozhi.zhlw.admin.dao.SysLogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2021/01/18-15:04:13 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport-[348] Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tuozhi.zhlw.admin.dao.SysMenuDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2021/01/18-15:04:13 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[187] Finished Spring Data repository scanning in 43ms. Found 0 Redis repository interfaces.
2021/01/18-15:04:13 [main] INFO  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker-[330] Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021/01/18-15:04:14 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer-[92] Tomcat initialized with port(s): 317 (http)
2021/01/18-15:04:14 [main] INFO  org.apache.coyote.http11.Http11NioProtocol-[173] Initializing ProtocolHandler ["http-nio-317"]
2021/01/18-15:04:14 [main] INFO  org.apache.catalina.core.StandardService-[173] Starting service [Tomcat]
2021/01/18-15:04:14 [main] INFO  org.apache.catalina.core.StandardEngine-[173] Starting Servlet engine: [Apache Tomcat/9.0.29]
2021/01/18-15:04:14 [main] INFO  org.apache.jasper.servlet.TldScanner-[173] At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2021/01/18-15:04:14 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]-[173] Initializing Spring embedded WebApplicationContext
2021/01/18-15:04:14 [main] INFO  org.springframework.web.context.ContextLoader-[284] Root WebApplicationContext: initialization completed in 3133 ms
2021/01/18-15:04:14 [main] INFO  org.springframework.boot.web.servlet.RegistrationBean-[110] Filter characterEncodingFilter was not registered (possibly already registered?)
2021/01/18-15:04:14 [main] INFO  com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure-[56] Init DruidDataSource
2021/01/18-15:04:14 [main] WARN  com.alibaba.druid.pool.DruidAbstractDataSource-[1216] oracle.jdbc.driver.OracleDriver is deprecated.Having use oracle.jdbc.OracleDriver.
2021/01/18-15:04:36 [main] ERROR com.alibaba.druid.pool.DruidDataSource-[936] init datasource error, url: jdbc:oracle:thin:@10.212.23.30:1521/tradedb
java.sql.SQLRecoverableException: IO 错误: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:743)
	at oracle.jdbc.driver.PhysicalConnection.connect(PhysicalConnection.java:662)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:32)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:560)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1645)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1709)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:932)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1922)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1864)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1792)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1287)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:228)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1108)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.tuozhi.zhlw.admin.MyApplication.main(MyApplication.java:34)
Caused by: oracle.net.ns.NetException: The Network Adapter could not establish the connection
	at oracle.net.nt.ConnStrategy.execute(ConnStrategy.java:470)
	at oracle.net.resolver.AddrResolution.resolveAndExecute(AddrResolution.java:506)
	at oracle.net.ns.NSProtocol.establishConnection(NSProtocol.java:595)
	at oracle.net.ns.NSProtocol.connect(NSProtocol.java:230)
	at oracle.jdbc.driver.T4CConnection.connect(T4CConnection.java:1452)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:496)
	... 55 common frames omitted
Caused by: java.net.ConnectException: Connection timed out: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at oracle.net.nt.TcpNTAdapter.connect(TcpNTAdapter.java:161)
	at oracle.net.nt.ConnOption.connect(ConnOption.java:159)
	at oracle.net.nt.ConnStrategy.execute(ConnStrategy.java:428)
	... 60 common frames omitted
2021/01/18-15:04:36 [main] ERROR com.alibaba.druid.pool.DruidDataSource-[978] {dataSource-1} init error
java.sql.SQLRecoverableException: IO 错误: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:743)
	at oracle.jdbc.driver.PhysicalConnection.connect(PhysicalConnection.java:662)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:32)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:560)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1645)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1709)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:932)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1922)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1864)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1792)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1287)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:228)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1108)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.tuozhi.zhlw.admin.MyApplication.main(MyApplication.java:34)
Caused by: oracle.net.ns.NetException: The Network Adapter could not establish the connection
	at oracle.net.nt.ConnStrategy.execute(ConnStrategy.java:470)
	at oracle.net.resolver.AddrResolution.resolveAndExecute(AddrResolution.java:506)
	at oracle.net.ns.NSProtocol.establishConnection(NSProtocol.java:595)
	at oracle.net.ns.NSProtocol.connect(NSProtocol.java:230)
	at oracle.jdbc.driver.T4CConnection.connect(T4CConnection.java:1452)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:496)
	... 55 common frames omitted
Caused by: java.net.ConnectException: Connection timed out: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at oracle.net.nt.TcpNTAdapter.connect(TcpNTAdapter.java:161)
	at oracle.net.nt.ConnOption.connect(ConnOption.java:159)
	at oracle.net.nt.ConnStrategy.execute(ConnStrategy.java:428)
	... 60 common frames omitted
2021/01/18-15:04:36 [main] INFO  com.alibaba.druid.pool.DruidDataSource-[1003] {dataSource-1} inited
2021/01/18-15:04:36 [main] WARN  org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext-[558] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLRecoverableException: IO 错误: The Network Adapter could not establish the connection
2021/01/18-15:04:36 [main] INFO  org.apache.catalina.core.StandardService-[173] Stopping service [Tomcat]
2021/01/18-15:04:36 [main] INFO  org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener-[136] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2021/01/18-15:04:36 [main] ERROR org.springframework.boot.SpringApplication-[826] Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLRecoverableException: IO 错误: The Network Adapter could not establish the connection
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:228)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1108)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.tuozhi.zhlw.admin.MyApplication.main(MyApplication.java:34)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLRecoverableException: IO 错误: The Network Adapter could not establish the connection
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1796)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1287)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 28 common frames omitted
Caused by: java.sql.SQLRecoverableException: IO 错误: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:743)
	at oracle.jdbc.driver.PhysicalConnection.connect(PhysicalConnection.java:662)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:32)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:560)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1645)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1709)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:932)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1922)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1864)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1792)
	... 39 common frames omitted
Caused by: oracle.net.ns.NetException: The Network Adapter could not establish the connection
	at oracle.net.nt.ConnStrategy.execute(ConnStrategy.java:470)
	at oracle.net.resolver.AddrResolution.resolveAndExecute(AddrResolution.java:506)
	at oracle.net.ns.NSProtocol.establishConnection(NSProtocol.java:595)
	at oracle.net.ns.NSProtocol.connect(NSProtocol.java:230)
	at oracle.jdbc.driver.T4CConnection.connect(T4CConnection.java:1452)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:496)
	... 55 common frames omitted
Caused by: java.net.ConnectException: Connection timed out: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at oracle.net.nt.TcpNTAdapter.connect(TcpNTAdapter.java:161)
	at oracle.net.nt.ConnOption.connect(ConnOption.java:159)
	at oracle.net.nt.ConnStrategy.execute(ConnStrategy.java:428)
	... 60 common frames omitted
2021/01/18-15:05:00 [main] INFO  com.tuozhi.zhlw.admin.MyApplication-[55] Starting MyApplication on tz002-PC with PID 4168 (D:\JCAPP\cd-jcApp\cd-zhlw-web-admin\target\classes started by tz008 in D:\JCAPP\cd-jcApp)
2021/01/18-15:05:00 [main] DEBUG com.tuozhi.zhlw.admin.MyApplication-[56] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2021/01/18-15:05:00 [main] INFO  com.tuozhi.zhlw.admin.MyApplication-[655] The following profiles are active: dev
2021/01/18-15:05:01 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[249] Multiple Spring Data modules found, entering strict repository configuration mode!
2021/01/18-15:05:01 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[127] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021/01/18-15:05:01 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[187] Finished Spring Data repository scanning in 104ms. Found 3 JPA repository interfaces.
2021/01/18-15:05:01 [main] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner-[239] Skipping MapperFactoryBean with name 'workFlowNodeMapper' and 'com.tuozhi.zhlw.admin.jc.mapper.WorkFlowNodeMapper' mapperInterface. Bean already defined with the same name!
2021/01/18-15:05:01 [main] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner-[166] No MyBatis mapper was found in '[com.tuozhi.zhlw.admin]' package. Please check your configuration.
2021/01/18-15:05:01 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[249] Multiple Spring Data modules found, entering strict repository configuration mode!
2021/01/18-15:05:01 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[127] Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2021/01/18-15:05:01 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport-[348] Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tuozhi.zhlw.admin.dao.SysAppDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2021/01/18-15:05:01 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport-[348] Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tuozhi.zhlw.admin.dao.SysLogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2021/01/18-15:05:01 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport-[348] Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tuozhi.zhlw.admin.dao.SysMenuDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2021/01/18-15:05:01 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[187] Finished Spring Data repository scanning in 44ms. Found 0 Redis repository interfaces.
2021/01/18-15:05:02 [main] INFO  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker-[330] Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021/01/18-15:05:02 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer-[92] Tomcat initialized with port(s): 317 (http)
2021/01/18-15:05:02 [main] INFO  org.apache.coyote.http11.Http11NioProtocol-[173] Initializing ProtocolHandler ["http-nio-317"]
2021/01/18-15:05:02 [main] INFO  org.apache.catalina.core.StandardService-[173] Starting service [Tomcat]
2021/01/18-15:05:02 [main] INFO  org.apache.catalina.core.StandardEngine-[173] Starting Servlet engine: [Apache Tomcat/9.0.29]
2021/01/18-15:05:03 [main] INFO  org.apache.jasper.servlet.TldScanner-[173] At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2021/01/18-15:05:03 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]-[173] Initializing Spring embedded WebApplicationContext
2021/01/18-15:05:03 [main] INFO  org.springframework.web.context.ContextLoader-[284] Root WebApplicationContext: initialization completed in 2283 ms
2021/01/18-15:05:03 [main] INFO  org.springframework.boot.web.servlet.RegistrationBean-[110] Filter characterEncodingFilter was not registered (possibly already registered?)
2021/01/18-15:05:03 [main] INFO  com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure-[56] Init DruidDataSource
2021/01/18-15:05:03 [main] WARN  com.alibaba.druid.pool.DruidAbstractDataSource-[1216] oracle.jdbc.driver.OracleDriver is deprecated.Having use oracle.jdbc.OracleDriver.
2021/01/18-15:05:07 [RMI TCP Accept-0] WARN  sun.rmi.transport.tcp-[237] RMI TCP Accept-0: accept loop for ServerSocket[addr=0.0.0.0/0.0.0.0,localport=11470] throws
java.io.IOException: The server sockets created using the LocalRMIServerSocketFactory only accept connections from clients running on the host where the RMI remote objects have been exported.
	at sun.management.jmxremote.LocalRMIServerSocketFactory$1.accept(LocalRMIServerSocketFactory.java:114)
	at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:400)
	at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:372)
	at java.lang.Thread.run(Thread.java:745)
2021/01/18-15:05:07 [RMI TCP Accept-0] WARN  sun.rmi.transport.tcp-[237] RMI TCP Accept-0: accept loop for ServerSocket[addr=0.0.0.0/0.0.0.0,localport=11470] throws
java.io.IOException: The server sockets created using the LocalRMIServerSocketFactory only accept connections from clients running on the host where the RMI remote objects have been exported.
	at sun.management.jmxremote.LocalRMIServerSocketFactory$1.accept(LocalRMIServerSocketFactory.java:114)
	at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:400)
	at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:372)
	at java.lang.Thread.run(Thread.java:745)
2021/01/18-15:05:07 [RMI TCP Accept-0] WARN  sun.rmi.transport.tcp-[237] RMI TCP Accept-0: accept loop for ServerSocket[addr=0.0.0.0/0.0.0.0,localport=11470] throws
java.io.IOException: The server sockets created using the LocalRMIServerSocketFactory only accept connections from clients running on the host where the RMI remote objects have been exported.
	at sun.management.jmxremote.LocalRMIServerSocketFactory$1.accept(LocalRMIServerSocketFactory.java:114)
	at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:400)
	at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:372)
	at java.lang.Thread.run(Thread.java:745)
2021/01/18-15:05:07 [RMI TCP Accept-0] WARN  sun.rmi.transport.tcp-[237] RMI TCP Accept-0: accept loop for ServerSocket[addr=0.0.0.0/0.0.0.0,localport=11470] throws
java.io.IOException: The server sockets created using the LocalRMIServerSocketFactory only accept connections from clients running on the host where the RMI remote objects have been exported.
	at sun.management.jmxremote.LocalRMIServerSocketFactory$1.accept(LocalRMIServerSocketFactory.java:114)
	at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:400)
	at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:372)
	at java.lang.Thread.run(Thread.java:745)
2021/01/18-15:05:07 [main] ERROR com.alibaba.druid.pool.DruidDataSource-[936] init datasource error, url: jdbc:oracle:thin:@10.212.23.30:1521/tradedb
java.sql.SQLRecoverableException: IO 错误: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:743)
	at oracle.jdbc.driver.PhysicalConnection.connect(PhysicalConnection.java:662)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:32)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:560)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1645)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1709)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:932)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1922)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1864)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1792)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1287)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:228)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1108)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.tuozhi.zhlw.admin.MyApplication.main(MyApplication.java:34)
Caused by: oracle.net.ns.NetException: The Network Adapter could not establish the connection
	at oracle.net.nt.ConnStrategy.execute(ConnStrategy.java:470)
	at oracle.net.resolver.AddrResolution.resolveAndExecute(AddrResolution.java:506)
	at oracle.net.ns.NSProtocol.establishConnection(NSProtocol.java:595)
	at oracle.net.ns.NSProtocol.connect(NSProtocol.java:230)
	at oracle.jdbc.driver.T4CConnection.connect(T4CConnection.java:1452)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:496)
	... 55 common frames omitted
Caused by: java.net.SocketException: Software caused connection abort: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at oracle.net.nt.TcpNTAdapter.connect(TcpNTAdapter.java:161)
	at oracle.net.nt.ConnOption.connect(ConnOption.java:159)
	at oracle.net.nt.ConnStrategy.execute(ConnStrategy.java:428)
	... 60 common frames omitted
2021/01/18-15:05:07 [main] ERROR com.alibaba.druid.pool.DruidDataSource-[978] {dataSource-1} init error
java.sql.SQLRecoverableException: IO 错误: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:743)
	at oracle.jdbc.driver.PhysicalConnection.connect(PhysicalConnection.java:662)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:32)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:560)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1645)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1709)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:932)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1922)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1864)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1792)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1287)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:228)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1108)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.tuozhi.zhlw.admin.MyApplication.main(MyApplication.java:34)
Caused by: oracle.net.ns.NetException: The Network Adapter could not establish the connection
	at oracle.net.nt.ConnStrategy.execute(ConnStrategy.java:470)
	at oracle.net.resolver.AddrResolution.resolveAndExecute(AddrResolution.java:506)
	at oracle.net.ns.NSProtocol.establishConnection(NSProtocol.java:595)
	at oracle.net.ns.NSProtocol.connect(NSProtocol.java:230)
	at oracle.jdbc.driver.T4CConnection.connect(T4CConnection.java:1452)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:496)
	... 55 common frames omitted
Caused by: java.net.SocketException: Software caused connection abort: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at oracle.net.nt.TcpNTAdapter.connect(TcpNTAdapter.java:161)
	at oracle.net.nt.ConnOption.connect(ConnOption.java:159)
	at oracle.net.nt.ConnStrategy.execute(ConnStrategy.java:428)
	... 60 common frames omitted
2021/01/18-15:05:07 [main] INFO  com.alibaba.druid.pool.DruidDataSource-[1003] {dataSource-1} inited
2021/01/18-15:05:07 [main] WARN  org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext-[558] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLRecoverableException: IO 错误: The Network Adapter could not establish the connection
2021/01/18-15:05:07 [main] INFO  org.apache.catalina.core.StandardService-[173] Stopping service [Tomcat]
2021/01/18-15:05:07 [main] INFO  org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener-[136] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2021/01/18-15:05:07 [main] ERROR org.springframework.boot.SpringApplication-[826] Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLRecoverableException: IO 错误: The Network Adapter could not establish the connection
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:228)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1108)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.tuozhi.zhlw.admin.MyApplication.main(MyApplication.java:34)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLRecoverableException: IO 错误: The Network Adapter could not establish the connection
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1796)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1287)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 28 common frames omitted
Caused by: java.sql.SQLRecoverableException: IO 错误: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:743)
	at oracle.jdbc.driver.PhysicalConnection.connect(PhysicalConnection.java:662)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:32)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:560)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1645)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1709)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:932)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1922)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1864)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1792)
	... 39 common frames omitted
Caused by: oracle.net.ns.NetException: The Network Adapter could not establish the connection
	at oracle.net.nt.ConnStrategy.execute(ConnStrategy.java:470)
	at oracle.net.resolver.AddrResolution.resolveAndExecute(AddrResolution.java:506)
	at oracle.net.ns.NSProtocol.establishConnection(NSProtocol.java:595)
	at oracle.net.ns.NSProtocol.connect(NSProtocol.java:230)
	at oracle.jdbc.driver.T4CConnection.connect(T4CConnection.java:1452)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:496)
	... 55 common frames omitted
Caused by: java.net.SocketException: Software caused connection abort: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at oracle.net.nt.TcpNTAdapter.connect(TcpNTAdapter.java:161)
	at oracle.net.nt.ConnOption.connect(ConnOption.java:159)
	at oracle.net.nt.ConnStrategy.execute(ConnStrategy.java:428)
	... 60 common frames omitted
2021/01/18-15:05:16 [main] INFO  com.tuozhi.zhlw.admin.MyApplication-[55] Starting MyApplication on tz002-PC with PID 11736 (D:\JCAPP\cd-jcApp\cd-zhlw-web-admin\target\classes started by tz008 in D:\JCAPP\cd-jcApp)
2021/01/18-15:05:16 [main] DEBUG com.tuozhi.zhlw.admin.MyApplication-[56] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2021/01/18-15:05:16 [main] INFO  com.tuozhi.zhlw.admin.MyApplication-[655] The following profiles are active: dev
2021/01/18-15:05:17 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[249] Multiple Spring Data modules found, entering strict repository configuration mode!
2021/01/18-15:05:17 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[127] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021/01/18-15:05:17 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[187] Finished Spring Data repository scanning in 67ms. Found 3 JPA repository interfaces.
2021/01/18-15:05:17 [main] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner-[239] Skipping MapperFactoryBean with name 'workFlowNodeMapper' and 'com.tuozhi.zhlw.admin.jc.mapper.WorkFlowNodeMapper' mapperInterface. Bean already defined with the same name!
2021/01/18-15:05:17 [main] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner-[166] No MyBatis mapper was found in '[com.tuozhi.zhlw.admin]' package. Please check your configuration.
2021/01/18-15:05:17 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[249] Multiple Spring Data modules found, entering strict repository configuration mode!
2021/01/18-15:05:17 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[127] Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2021/01/18-15:05:17 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport-[348] Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tuozhi.zhlw.admin.dao.SysAppDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2021/01/18-15:05:17 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport-[348] Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tuozhi.zhlw.admin.dao.SysLogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2021/01/18-15:05:17 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport-[348] Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tuozhi.zhlw.admin.dao.SysMenuDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2021/01/18-15:05:17 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[187] Finished Spring Data repository scanning in 44ms. Found 0 Redis repository interfaces.
2021/01/18-15:05:17 [main] INFO  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker-[330] Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021/01/18-15:05:18 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer-[92] Tomcat initialized with port(s): 317 (http)
2021/01/18-15:05:18 [main] INFO  org.apache.coyote.http11.Http11NioProtocol-[173] Initializing ProtocolHandler ["http-nio-317"]
2021/01/18-15:05:18 [main] INFO  org.apache.catalina.core.StandardService-[173] Starting service [Tomcat]
2021/01/18-15:05:18 [main] INFO  org.apache.catalina.core.StandardEngine-[173] Starting Servlet engine: [Apache Tomcat/9.0.29]
2021/01/18-15:05:18 [main] INFO  org.apache.jasper.servlet.TldScanner-[173] At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2021/01/18-15:05:18 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]-[173] Initializing Spring embedded WebApplicationContext
2021/01/18-15:05:18 [main] INFO  org.springframework.web.context.ContextLoader-[284] Root WebApplicationContext: initialization completed in 2461 ms
2021/01/18-15:05:18 [main] INFO  org.springframework.boot.web.servlet.RegistrationBean-[110] Filter characterEncodingFilter was not registered (possibly already registered?)
2021/01/18-15:05:18 [main] INFO  com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure-[56] Init DruidDataSource
2021/01/18-15:05:18 [main] WARN  com.alibaba.druid.pool.DruidAbstractDataSource-[1216] oracle.jdbc.driver.OracleDriver is deprecated.Having use oracle.jdbc.OracleDriver.
2021/01/18-15:05:20 [main] INFO  com.alibaba.druid.pool.DruidDataSource-[1003] {dataSource-1} inited
2021/01/18-15:05:20 [main] INFO  org.hibernate.jpa.internal.util.LogHelper-[31] HHH000204: Processing PersistenceUnitInfo [name: default]
2021/01/18-15:05:20 [main] INFO  org.hibernate.Version-[46] HHH000412: Hibernate Core {5.4.9.Final}
2021/01/18-15:05:21 [main] INFO  org.hibernate.annotations.common.Version-[66] HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2021/01/18-15:05:21 [main] INFO  org.hibernate.dialect.Dialect-[172] HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
2021/01/18-15:05:23 [main] INFO  org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator-[52] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2021/01/18-15:05:23 [main] INFO  org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean-[416] Initialized JPA EntityManagerFactory for persistence unit 'default'
2021/01/18-15:05:26 [main] WARN  org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration-[220] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2021/01/18-15:05:27 [main] INFO  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler-[60] Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2021/01/18-15:05:27 [main] INFO  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler-[60] Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2021/01/18-15:05:27 [main] INFO  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler-[83] Clear EntityHelper entityTableMap cache.
2021/01/18-15:05:27 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler-[171] Initializing ExecutorService 'taskScheduler'
2021/01/18-15:05:27 [main] INFO  org.apache.coyote.http11.Http11NioProtocol-[173] Starting ProtocolHandler ["http-nio-317"]
2021/01/18-15:05:27 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer-[204] Tomcat started on port(s): 317 (http) with context path ''
2021/01/18-15:05:27 [main] INFO  com.tuozhi.zhlw.admin.MyApplication-[61] Started MyApplication in 12.226 seconds (JVM running for 13.581)
2021/01/18-15:05:27 [main] DEBUG com.tuozhi.zhlw.admin.jc.mapper.BaseDeptMapper.getJCBDeptId-[159] ==>  Preparing: SELECT ID FROM CD_SYSTEM.SYS_DEPT WHERE DEPT_WORK = '1000002' 
2021/01/18-15:05:27 [main] DEBUG com.tuozhi.zhlw.admin.jc.mapper.BaseDeptMapper.getJCBDeptId-[159] ==> Parameters: 
2021/01/18-15:05:27 [main] DEBUG com.tuozhi.zhlw.admin.jc.mapper.BaseDeptMapper.getJCBDeptId-[159] <==      Total: 1
2021/01/18-15:05:27 [main] DEBUG com.tuozhi.zhlw.admin.jc.mapper.BaseDeptMapper.getIssuerDeptId-[159] ==>  Preparing: SELECT ID FROM CD_SYSTEM.SYS_DEPT WHERE DEPT_WORK = 'FX' 
2021/01/18-15:05:27 [main] DEBUG com.tuozhi.zhlw.admin.jc.mapper.BaseDeptMapper.getIssuerDeptId-[159] ==> Parameters: 
2021/01/18-15:05:27 [main] DEBUG com.tuozhi.zhlw.admin.jc.mapper.BaseDeptMapper.getIssuerDeptId-[159] <==      Total: 1
2021/01/18-15:26:44 [http-nio-317-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]-[173] Initializing Spring DispatcherServlet 'dispatcherServlet'
2021/01/18-15:26:44 [http-nio-317-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet-[525] Initializing Servlet 'dispatcherServlet'
2021/01/18-15:26:44 [http-nio-317-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet-[547] Completed initialization in 10 ms
2021/01/18-15:26:44 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-15:26:44 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-15:26:44 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-15:26:44 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/getNewVersionFilePath
2021/01/18-15:26:44 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-15:26:44 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController.getNewVersionFilePath
2021/01/18-15:26:44 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[]
2021/01/18-15:26:44 [http-nio-317-exec-1] ERROR com.alibaba.druid.util.JdbcUtils-[102] close statement error
java.sql.SQLRecoverableException: 关闭的连接
	at oracle.jdbc.driver.PhysicalConnection.needLine(PhysicalConnection.java:4216)
	at oracle.jdbc.driver.OracleStatement.closeOrCache(OracleStatement.java:1431)
	at oracle.jdbc.driver.OracleStatement.close(OracleStatement.java:1410)
	at oracle.jdbc.driver.OracleStatementWrapper.close(OracleStatementWrapper.java:102)
	at com.alibaba.druid.util.JdbcUtils.close(JdbcUtils.java:100)
	at com.alibaba.druid.pool.vendor.OracleValidConnectionChecker.isValidConnection(OracleValidConnectionChecker.java:88)
	at com.alibaba.druid.pool.DruidAbstractDataSource.testConnectionInternal(DruidAbstractDataSource.java:1463)
	at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:1446)
	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5059)
	at com.alibaba.druid.filter.stat.StatFilter.dataSource_getConnection(StatFilter.java:680)
	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5055)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1373)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1365)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:109)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79)
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82)
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:68)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:338)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:84)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:326)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:111)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy227.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy136.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy210.getNewVersionFilePath(Unknown Source)
	at com.tuozhi.zhlw.admin.jcApp.service.impl.JCAppETCCardServiceImpl.getNewVersionFilePath(JCAppETCCardServiceImpl.java:66)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController.getNewVersionFilePath(JCAppETCCardController.java:241)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController$$FastClassBySpringCGLIB$$466c7024.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect.around(SysLoginAspect.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController$$EnhancerBySpringCGLIB$$2d12480.getNewVersionFilePath(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.tuozhi.zhlw.admin.config.CorsFilter.doFilter(CorsFilter.java:29)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2021/01/18-15:26:44 [http-nio-317-exec-1] ERROR com.alibaba.druid.util.JdbcUtils-[102] close statement error
java.sql.SQLRecoverableException: 关闭的连接
	at oracle.jdbc.driver.PhysicalConnection.needLine(PhysicalConnection.java:4216)
	at oracle.jdbc.driver.OracleStatement.closeOrCache(OracleStatement.java:1431)
	at oracle.jdbc.driver.OracleStatement.close(OracleStatement.java:1410)
	at oracle.jdbc.driver.OracleStatementWrapper.close(OracleStatementWrapper.java:102)
	at com.alibaba.druid.util.JdbcUtils.close(JdbcUtils.java:100)
	at com.alibaba.druid.pool.vendor.OracleValidConnectionChecker.isValidConnection(OracleValidConnectionChecker.java:88)
	at com.alibaba.druid.pool.DruidAbstractDataSource.testConnectionInternal(DruidAbstractDataSource.java:1463)
	at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:1446)
	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5059)
	at com.alibaba.druid.filter.stat.StatFilter.dataSource_getConnection(StatFilter.java:680)
	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5055)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1373)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1365)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:109)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79)
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82)
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:68)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:338)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:84)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:326)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:111)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy227.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy136.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy210.getNewVersionFilePath(Unknown Source)
	at com.tuozhi.zhlw.admin.jcApp.service.impl.JCAppETCCardServiceImpl.getNewVersionFilePath(JCAppETCCardServiceImpl.java:66)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController.getNewVersionFilePath(JCAppETCCardController.java:241)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController$$FastClassBySpringCGLIB$$466c7024.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect.around(SysLoginAspect.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController$$EnhancerBySpringCGLIB$$2d12480.getNewVersionFilePath(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.tuozhi.zhlw.admin.config.CorsFilter.doFilter(CorsFilter.java:29)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2021/01/18-15:26:44 [http-nio-317-exec-1] ERROR com.alibaba.druid.util.JdbcUtils-[102] close statement error
java.sql.SQLRecoverableException: 关闭的连接
	at oracle.jdbc.driver.PhysicalConnection.needLine(PhysicalConnection.java:4216)
	at oracle.jdbc.driver.OracleStatement.closeOrCache(OracleStatement.java:1431)
	at oracle.jdbc.driver.OracleStatement.close(OracleStatement.java:1410)
	at oracle.jdbc.driver.OracleStatementWrapper.close(OracleStatementWrapper.java:102)
	at com.alibaba.druid.util.JdbcUtils.close(JdbcUtils.java:100)
	at com.alibaba.druid.pool.vendor.OracleValidConnectionChecker.isValidConnection(OracleValidConnectionChecker.java:88)
	at com.alibaba.druid.pool.DruidAbstractDataSource.testConnectionInternal(DruidAbstractDataSource.java:1463)
	at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:1446)
	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5059)
	at com.alibaba.druid.filter.stat.StatFilter.dataSource_getConnection(StatFilter.java:680)
	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5055)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1373)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1365)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:109)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79)
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82)
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:68)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:338)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:84)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:326)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:111)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy227.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy136.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy210.getNewVersionFilePath(Unknown Source)
	at com.tuozhi.zhlw.admin.jcApp.service.impl.JCAppETCCardServiceImpl.getNewVersionFilePath(JCAppETCCardServiceImpl.java:66)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController.getNewVersionFilePath(JCAppETCCardController.java:241)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController$$FastClassBySpringCGLIB$$466c7024.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect.around(SysLoginAspect.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController$$EnhancerBySpringCGLIB$$2d12480.getNewVersionFilePath(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.tuozhi.zhlw.admin.config.CorsFilter.doFilter(CorsFilter.java:29)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2021/01/18-15:26:44 [http-nio-317-exec-1] ERROR com.alibaba.druid.util.JdbcUtils-[102] close statement error
java.sql.SQLRecoverableException: 关闭的连接
	at oracle.jdbc.driver.PhysicalConnection.needLine(PhysicalConnection.java:4216)
	at oracle.jdbc.driver.OracleStatement.closeOrCache(OracleStatement.java:1431)
	at oracle.jdbc.driver.OracleStatement.close(OracleStatement.java:1410)
	at oracle.jdbc.driver.OracleStatementWrapper.close(OracleStatementWrapper.java:102)
	at com.alibaba.druid.util.JdbcUtils.close(JdbcUtils.java:100)
	at com.alibaba.druid.pool.vendor.OracleValidConnectionChecker.isValidConnection(OracleValidConnectionChecker.java:88)
	at com.alibaba.druid.pool.DruidAbstractDataSource.testConnectionInternal(DruidAbstractDataSource.java:1463)
	at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:1446)
	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5059)
	at com.alibaba.druid.filter.stat.StatFilter.dataSource_getConnection(StatFilter.java:680)
	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5055)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1373)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1365)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:109)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79)
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82)
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:68)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:338)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:84)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:326)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:111)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy227.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy136.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy210.getNewVersionFilePath(Unknown Source)
	at com.tuozhi.zhlw.admin.jcApp.service.impl.JCAppETCCardServiceImpl.getNewVersionFilePath(JCAppETCCardServiceImpl.java:66)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController.getNewVersionFilePath(JCAppETCCardController.java:241)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController$$FastClassBySpringCGLIB$$466c7024.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect.around(SysLoginAspect.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController$$EnhancerBySpringCGLIB$$2d12480.getNewVersionFilePath(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.tuozhi.zhlw.admin.config.CorsFilter.doFilter(CorsFilter.java:29)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2021/01/18-15:26:44 [http-nio-317-exec-1] ERROR com.alibaba.druid.util.JdbcUtils-[102] close statement error
java.sql.SQLRecoverableException: 关闭的连接
	at oracle.jdbc.driver.PhysicalConnection.needLine(PhysicalConnection.java:4216)
	at oracle.jdbc.driver.OracleStatement.closeOrCache(OracleStatement.java:1431)
	at oracle.jdbc.driver.OracleStatement.close(OracleStatement.java:1410)
	at oracle.jdbc.driver.OracleStatementWrapper.close(OracleStatementWrapper.java:102)
	at com.alibaba.druid.util.JdbcUtils.close(JdbcUtils.java:100)
	at com.alibaba.druid.pool.vendor.OracleValidConnectionChecker.isValidConnection(OracleValidConnectionChecker.java:88)
	at com.alibaba.druid.pool.DruidAbstractDataSource.testConnectionInternal(DruidAbstractDataSource.java:1463)
	at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:1446)
	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5059)
	at com.alibaba.druid.filter.stat.StatFilter.dataSource_getConnection(StatFilter.java:680)
	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5055)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1373)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1365)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:109)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79)
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82)
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:68)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:338)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:84)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:326)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:111)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy227.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy136.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy210.getNewVersionFilePath(Unknown Source)
	at com.tuozhi.zhlw.admin.jcApp.service.impl.JCAppETCCardServiceImpl.getNewVersionFilePath(JCAppETCCardServiceImpl.java:66)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController.getNewVersionFilePath(JCAppETCCardController.java:241)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController$$FastClassBySpringCGLIB$$466c7024.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect.around(SysLoginAspect.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController$$EnhancerBySpringCGLIB$$2d12480.getNewVersionFilePath(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.tuozhi.zhlw.admin.config.CorsFilter.doFilter(CorsFilter.java:29)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2021/01/18-15:26:44 [http-nio-317-exec-1] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAppETCCardMapper.getNewVersionFilePath-[159] ==>  Preparing: SELECT VERSION,URLPATH FROM CD_JC.JC_APP_VERSION where rownum=1 ORDER BY VERSION desc 
2021/01/18-15:26:44 [http-nio-317-exec-1] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAppETCCardMapper.getNewVersionFilePath-[159] ==> Parameters: 
2021/01/18-15:26:44 [http-nio-317-exec-1] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAppETCCardMapper.getNewVersionFilePath-[159] <==      Total: 1
2021/01/18-15:26:44 [http-nio-317-exec-2] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] ==>  Preparing: select t.ID as deptId,t.PARENT_ID as deptParentId,t.DEPT_NAME as deptName,t.DEPT_WORK as deptWork,u.LOGIN_NAME as loginName,u.USER_NAME as userName,u.PASSWORD as password,u.ID as userId,u.LAST_PASSWORD_MODIFY_TIME lastPasswordModifyTime,u.PASSWORD_HISTORY passwordHistory, t.PRIVILEGE_ID as privilegeId ,u.VALID_STATUS as validStatus,(select wm_concat(ROLE_ID) from SYS_USER_ROLES where USER_ID= u.ID) roleIds,t.DEPT_LONG_ID deptLongId, t.WORKFLOWDEPTROLE workFlowDeptRole from SYS_USERS u left join SYS_DEPT t on t.ID = u.DEPT_ID where u.LOGIN_NAME = ? 
2021/01/18-15:26:44 [http-nio-317-exec-2] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] ==> Parameters: 1111111(String)
2021/01/18-15:26:44 [http-nio-317-exec-2] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] <==      Total: 1
2021/01/18-15:26:45 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-15:26:45 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-15:26:45 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-15:26:45 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/getBlackOrGreyListByVehicle
2021/01/18-15:26:45 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-15:26:45 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController.getBlackListByVehicle
2021/01/18-15:26:45 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[null]
2021/01/18-15:26:45 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalBlackList-[159] ==>  Preparing: SELECT jbr.REQUESTID, jbr.CARNUMBER, sed.ENUM_NAME CARCOLOUR, jbr.CARFEATURE, round( jbr.ELUDEMONEYNUMBER / 100, 2 ) ELUDEMONEYNUMBER, round( jbr.FACTMONEYNUMBER / 100, 2 ) FACTMONEYNUMBER, sed1.ENUM_NAME ELUDEMONEYTYPE, CASE WHEN jbr.ELUDEMONEYTYPE = 1001 THEN sed2.ENUM_NAME WHEN jbr.ELUDEMONEYTYPE = 1002 THEN sed3.ENUM_NAME WHEN jbr.ELUDEMONEYTYPE = 1003 THEN sed4.ENUM_NAME WHEN jbr.ELUDEMONEYTYPE = 1004 THEN sed5.ENUM_NAME END ELUDEMONEYTYPEITEMNAME, sed6.ENUM_NAME CARTYPE, jbr.AXLETYPE, bt2.NAME ENTRYSTATIONID, bt3.NAME EXITSTATIONID, to_char( jbr.ENTRYSTATIONTIME, 'yyyy-mm-dd HH24:mi:ss' ) ENTRYSTATIONTIME, to_char( jbr.EXITSTATIONTIME, 'yyyy-mm-dd HH24:mi:ss' ) EXITSTATIONTIME, nvl( jbr.TOTALWEIGHT, '' ) TOTALWEIGHT, decode( jbr.HAVECARD, 1, '是', 0, '否', '' ) HAVECARD, decode( jbr.HAVEDAMAGEDEVICE, 1, '有', 0, '无', '' ) HAVEDAMAGEDEVICE, decode( jbr.HAVEVIDEO, 1, '有', 0, '无', '' ) HAVEVIDEO, nvl( jbr.CPUCARDID, '' ) CPUCARDID, nvl( jbr.REQUESTDESCRIPTION, '' ) REQUESTDESCRIPTION, to_char( jbr.CREATETIME, 'yyyy-mm-dd HH24:mi:ss' ) CREATETIME, jbr.CREATEUSERNAME, sed7.dept_name CREATEDEPTID, nvl( jbr.SUMTOTAL, 0 ) SUMTOTAL, bd1.DEPT_NAME SERVICEDEPTNAME, jbr1.SREQUESTID 撤销状态, --有值已撤销，没有值未撤销 jbr.IS_APP, jbr.REQUESTSTATUS FROM cd_jc.JC_BLACKLIST_REQUEST jbr LEFT JOIN "CD_JC"."JC_BLACKLIST_REQUEST" jbr1 ON jbr1.SREQUESTID = jbr.REQUESTID AND jbr1.DELETEFLAG = 1 AND jbr1.LOGICTYPE = 2 INNER JOIN "CD_JC"."JC_BLACKLIST_FLOWPATH" jbf ON jbr.CURRENTFLOWPATHID = jbf.FLOWPATHID LEFT JOIN CD_SYSTEM.SYS_DEPT bd1 ON jbf.OPERATEDEPTID = bd1.ID LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed ON sed.ENUM_VALUE = jbr.CARCOLOUR AND sed.ENUM_ID = 39 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed1 ON sed1.ENUM_VALUE = jbr.ELUDEMONEYTYPE AND sed1.ENUM_ID = 87 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed2 ON sed2.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed2.ENUM_ID = 88 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed3 ON sed3.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed3.ENUM_ID = 89 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed4 ON sed4.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed4.ENUM_ID = 90 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed5 ON sed5.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed5.ENUM_ID = 91 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed6 ON sed6.ENUM_VALUE = jbr.CARTYPE AND sed6.ENUM_ID = 40 LEFT JOIN CD_SYSTEM.SYS_DEPT sed7 ON sed7.ID = jbr.CREATEDEPTID LEFT JOIN ( SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1' ) bt2 ON bt2.ID = jbr.ENTRYSTATIONID LEFT JOIN ( SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1' ) bt3 ON bt3.ID = jbr.EXITSTATIONID WHERE jbr.DELETEFLAG = 1 AND jbr.LOGICTYPE =1 and jbr.CREATETIME>=? and jbr.CREATETIME<=sysdate ORDER BY jbr.CREATETIME desc 
2021/01/18-15:26:45 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalBlackList-[159] ==> Parameters: 2021-01-18 00:00:00.0(Timestamp)
2021/01/18-15:26:46 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalBlackList-[159] <==      Total: 13
2021/01/18-15:26:46 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalGreyList-[159] ==>  Preparing: select t.REQUESTID,CARNUMBER,s2.ENUM_NAME LICENSECOLORID,CARFEATURE,round(ELUDEMONEYNUMBER/100,2) ELUDEMONEYNUMBER,round(FACTMONEYNUMBER/100,2) FACTMONEYNUMBER,s.ENUM_NAME ELUDEMONEYTYPE,s1.ENUM_NAME ELUDEMONEYTYPEITEM,s3.ENUM_NAME CARTYPE,AXLETYPE, bt2.NAME ENTRYSTATIONID, bt3.NAME EXITSTATIONID, to_char(ENTRYSTATIONTIME,'yyyy-mm-dd HH24:mi:ss') ENTRYSTATIONTIME,to_char(EXITSTATIONTIME,'yyyy-mm-dd HH24:mi:ss') EXITSTATIONTIME, nvl(TOTALWEIGHT,'') TOTALWEIGHT, decode(HAVECARD,1,'是',0,'否','') HAVECARD, decode(HAVEDAMAGEDEVICE,1,'有',0,'无','') HAVEDAMAGEDEVICE, decode(HAVEVIDEO,1,'有',0,'无','') HAVEVIDEO, nvl(CPUCARDID,'') CPUCARDID, nvl(REQUESTDESCRIPTION,'') REQUESTDESCRIPTION, to_char(t.CREATETIME,'yyyy-mm-dd HH24:mi:ss') CREATETIME, CREATEUSERNAME, s4.dept_name CREATEDEPTID, nvl(SUMTOTAL,0) SUMTOTAL, bd1.DEPT_NAME SERVICEDEPTNAME from cd_jc.JC_GRAYLIST_REQUEST t INNER JOIN "CD_JC"."JC_GRAYLIST_FLOWPATH" jbf ON t.CURRENTFLOWPATHID = jbf.FLOWPATHID LEFT JOIN CD_SYSTEM.SYS_DEPT bd1 ON jbf.DEPTID = bd1.DEPT_WORK LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s ON t.ELUDEMONEYTYPE = s.ENUM_VALUE and s.ENUM_ID = 43 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s1 ON t.ELUDEMONEYTYPEITEM = s1.ENUM_VALUE and s1.ENUM_ID = 44 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s2 ON t.LICENSECOLORID = s2.ENUM_VALUE and s2.ENUM_ID = 39 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s3 ON s3.ENUM_VALUE = t.CARTYPE AND s3.ENUM_ID = 40 LEFT JOIN CD_SYSTEM.SYS_DEPT s4 ON to_char(s4.ID) = t.CREATEDEPTID LEFT JOIN (SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1') bt2 ON bt2.ID = t.ENTRYSTATIONID LEFT JOIN (SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1') bt3 ON bt3.ID = t.EXITSTATIONID where t.CREATETIME>=? and t.CREATETIME<=sysdate order by t.CREATETIME desc 
2021/01/18-15:26:46 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalGreyList-[159] ==> Parameters: 2021-01-18 00:00:00.0(Timestamp)
2021/01/18-15:26:48 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalGreyList-[159] <==      Total: 0
2021/01/18-15:26:59 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-15:26:59 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-15:26:59 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-15:26:59 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/getEtcCardBlackList
2021/01/18-15:26:59 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-15:26:59 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController.getEtcCardBlackList
2021/01/18-15:26:59 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[津NYF096]
2021/01/18-15:26:59 [http-nio-317-exec-4] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] ==>  Preparing: select t.REQUESTORDERID, sed.enum_name OICARUSERTYPE, ttt.OICARTONNAGE, ttt.OICARAXIES, ttt.OICARWIDTH, ttt.OICARLENGTH, ttt.OIHEADSTOCKHEIGHT, to_char(t.saledate, 'yyyy-mm-dd HH24:mi:ss') saledate, t.cpucardid cpucardid, ttt.oiid oiid, s.codename codename, t.plateno plateno, s1.codename cardvehiclecolor, s2.codename cardvehicletype, decode(t.cardstate, 1,'待激活', 3, '发行', 4, '挂失', 5,'黑名单（欠费）', 6, '无卡挂起', 7,'有卡挂起',8,'无卡注销', 9, '有卡注销' ) cardstate, bc.codename cardblacklisttype, to_char(bc.createdate, 'yyyy-mm-dd hh24:mi:ss') createdate, ttt.oiplateno oiplateno, ttt.oiplatecolor oiplatecolor, ttt.oicarcategory oicarcategory, decode(ttt.oistate, 3, '在用', 4, '挂失', 6, '车型不符', 9, '注销', '不可用') oistate, t.ownername ownername, i.ciclientname as ciclientname, i.cimobile as cimobile, i.citel citel, i.ciidcard ciidcard, i.cilinkman cilinkman, t.clientid clientid, ebo.OFFICENAME, su.username, eocrt.oiid oiidtemp, evi.approvedcount, (select to_char(max(aecr.avt_inserttime), 'yyyy-mm-dd HH24:mi:ss') from avt_etc_card_client_rel@db_link_2310etc aecr where aecr.plateno=t.plateno and aecr.platenocolor=t.platenocolor) aecrsaledate, (select to_char(max(aeocr.avt_inserttime), 'yyyy-mm-dd HH24:mi:ss') from avt_etc_obu_client_rel@db_link_2310etc aeocr where aeocr.oiplateno=t.plateno and aeocr.oiplatecolor=t.platenocolor) aeocrsaledate from etc_card_client_rel@db_link_2310etc t left join etc_vehicle_info@db_link_2310etc evi on evi.plateno=t.plateno and evi.platenocolor=t.platenocolor left join ETC_OBU_CLIENT_REL_TEMP@db_link_2310etc eocrt on eocrt.oiplateno=t.plateno left join ETC_BUSINESS_OFFICE@db_link_2310etc ebo on t.OFFICEID=ebo.id left join etcv3_sys_user@db_link_2310etc su on t.userid=su.id left join etc_client_info@db_link_2310etc i on t.clientid = i.id left join (select tt.oiid, tt.oiplateno, o1.codename as oiplatecolor, o2.codename as oicarcategory, tt.oistate, tt.oiplatecolor as platecolor, tt.OICARTONNAGE, tt.OICARUSERTYPE, tt.OICARAXIES, tt.OICARWIDTH, tt.OICARLENGTH, tt.OIHEADSTOCKHEIGHT from etc_obu_client_rel@db_link_2310etc tt left join etc_system_code@db_link_2310etc o1 on o1.codevalue = tt.oiplatecolor and o1.typeid = 12 left join etc_system_code@db_link_2310etc o2 on o2.codevalue = tt.oicarcategory and o2.typeid = 13) ttt on ttt.oiplateno = t.plateno and ttt.platecolor = t.platenocolor left join (select b.cpucardid, b.createdate, bs.codename from etc_card_blacklist@db_link_2310etc b left join etc_system_code@db_link_2310etc bs on b.blacklisttype = bs.codevalue and bs.typeid = 43) bc on t.cpucardid = bc.cpucardid left join etc_system_code@db_link_2310etc s on s.codevalue = nvl(t.sendid, '1001002210001001') and s.typeid = 62 left join etc_system_code@db_link_2310etc s1 on s1.codevalue = t.platenocolor and s1.typeid = 12 left join etc_system_code@db_link_2310etc s2 on s2.codevalue = t.carcategory and s2.typeid = 13 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed ON ttt.OICARUSERTYPE = sed.ENUM_VALUE and sed.ENUM_ID = 41 WHERE t.plateno =? OR t.CPUCARDID=? 
2021/01/18-15:26:59 [http-nio-317-exec-4] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] ==> Parameters: 津NYF096(String), 津NYF096(String)
2021/01/18-15:27:04 [http-nio-317-exec-4] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] <==      Total: 1
2021/01/18-16:42:16 [http-nio-317-exec-7] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-16:42:16 [http-nio-317-exec-7] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-16:42:16 [http-nio-317-exec-7] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-16:42:16 [http-nio-317-exec-7] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/getNewVersionFilePath
2021/01/18-16:42:16 [http-nio-317-exec-7] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-16:42:16 [http-nio-317-exec-7] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController.getNewVersionFilePath
2021/01/18-16:42:16 [http-nio-317-exec-7] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[]
2021/01/18-16:42:16 [http-nio-317-exec-7] ERROR com.alibaba.druid.util.JdbcUtils-[102] close statement error
java.sql.SQLRecoverableException: 关闭的连接
	at oracle.jdbc.driver.PhysicalConnection.needLine(PhysicalConnection.java:4216)
	at oracle.jdbc.driver.OracleStatement.closeOrCache(OracleStatement.java:1431)
	at oracle.jdbc.driver.OracleStatement.close(OracleStatement.java:1410)
	at oracle.jdbc.driver.OracleStatementWrapper.close(OracleStatementWrapper.java:102)
	at com.alibaba.druid.util.JdbcUtils.close(JdbcUtils.java:100)
	at com.alibaba.druid.pool.vendor.OracleValidConnectionChecker.isValidConnection(OracleValidConnectionChecker.java:88)
	at com.alibaba.druid.pool.DruidAbstractDataSource.testConnectionInternal(DruidAbstractDataSource.java:1463)
	at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:1446)
	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5059)
	at com.alibaba.druid.filter.stat.StatFilter.dataSource_getConnection(StatFilter.java:680)
	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5055)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1373)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1365)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:109)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79)
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82)
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:68)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:338)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:84)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:326)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:111)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy227.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy136.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy210.getNewVersionFilePath(Unknown Source)
	at com.tuozhi.zhlw.admin.jcApp.service.impl.JCAppETCCardServiceImpl.getNewVersionFilePath(JCAppETCCardServiceImpl.java:66)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController.getNewVersionFilePath(JCAppETCCardController.java:241)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController$$FastClassBySpringCGLIB$$466c7024.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect.around(SysLoginAspect.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController$$EnhancerBySpringCGLIB$$2d12480.getNewVersionFilePath(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.tuozhi.zhlw.admin.config.CorsFilter.doFilter(CorsFilter.java:29)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2021/01/18-16:42:16 [http-nio-317-exec-7] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAppETCCardMapper.getNewVersionFilePath-[159] ==>  Preparing: SELECT VERSION,URLPATH FROM CD_JC.JC_APP_VERSION where rownum=1 ORDER BY VERSION desc 
2021/01/18-16:42:16 [http-nio-317-exec-7] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAppETCCardMapper.getNewVersionFilePath-[159] ==> Parameters: 
2021/01/18-16:42:17 [http-nio-317-exec-7] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAppETCCardMapper.getNewVersionFilePath-[159] <==      Total: 1
2021/01/18-16:42:23 [http-nio-317-exec-6] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] ==>  Preparing: select t.ID as deptId,t.PARENT_ID as deptParentId,t.DEPT_NAME as deptName,t.DEPT_WORK as deptWork,u.LOGIN_NAME as loginName,u.USER_NAME as userName,u.PASSWORD as password,u.ID as userId,u.LAST_PASSWORD_MODIFY_TIME lastPasswordModifyTime,u.PASSWORD_HISTORY passwordHistory, t.PRIVILEGE_ID as privilegeId ,u.VALID_STATUS as validStatus,(select wm_concat(ROLE_ID) from SYS_USER_ROLES where USER_ID= u.ID) roleIds,t.DEPT_LONG_ID deptLongId, t.WORKFLOWDEPTROLE workFlowDeptRole from SYS_USERS u left join SYS_DEPT t on t.ID = u.DEPT_ID where u.LOGIN_NAME = ? 
2021/01/18-16:42:23 [http-nio-317-exec-6] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] ==> Parameters: 1111111(String)
2021/01/18-16:42:24 [http-nio-317-exec-6] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] <==      Total: 1
2021/01/18-16:42:25 [http-nio-317-exec-8] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-16:42:25 [http-nio-317-exec-8] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-16:42:25 [http-nio-317-exec-8] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-16:42:25 [http-nio-317-exec-8] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/getBlackOrGreyListByVehicle
2021/01/18-16:42:25 [http-nio-317-exec-8] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-16:42:25 [http-nio-317-exec-8] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController.getBlackListByVehicle
2021/01/18-16:42:25 [http-nio-317-exec-8] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[null]
2021/01/18-16:42:25 [http-nio-317-exec-8] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalBlackList-[159] ==>  Preparing: SELECT jbr.REQUESTID, jbr.CARNUMBER, sed.ENUM_NAME CARCOLOUR, jbr.CARFEATURE, round( jbr.ELUDEMONEYNUMBER / 100, 2 ) ELUDEMONEYNUMBER, round( jbr.FACTMONEYNUMBER / 100, 2 ) FACTMONEYNUMBER, sed1.ENUM_NAME ELUDEMONEYTYPE, CASE WHEN jbr.ELUDEMONEYTYPE = 1001 THEN sed2.ENUM_NAME WHEN jbr.ELUDEMONEYTYPE = 1002 THEN sed3.ENUM_NAME WHEN jbr.ELUDEMONEYTYPE = 1003 THEN sed4.ENUM_NAME WHEN jbr.ELUDEMONEYTYPE = 1004 THEN sed5.ENUM_NAME END ELUDEMONEYTYPEITEMNAME, sed6.ENUM_NAME CARTYPE, jbr.AXLETYPE, bt2.NAME ENTRYSTATIONID, bt3.NAME EXITSTATIONID, to_char( jbr.ENTRYSTATIONTIME, 'yyyy-mm-dd HH24:mi:ss' ) ENTRYSTATIONTIME, to_char( jbr.EXITSTATIONTIME, 'yyyy-mm-dd HH24:mi:ss' ) EXITSTATIONTIME, nvl( jbr.TOTALWEIGHT, '' ) TOTALWEIGHT, decode( jbr.HAVECARD, 1, '是', 0, '否', '' ) HAVECARD, decode( jbr.HAVEDAMAGEDEVICE, 1, '有', 0, '无', '' ) HAVEDAMAGEDEVICE, decode( jbr.HAVEVIDEO, 1, '有', 0, '无', '' ) HAVEVIDEO, nvl( jbr.CPUCARDID, '' ) CPUCARDID, nvl( jbr.REQUESTDESCRIPTION, '' ) REQUESTDESCRIPTION, to_char( jbr.CREATETIME, 'yyyy-mm-dd HH24:mi:ss' ) CREATETIME, jbr.CREATEUSERNAME, sed7.dept_name CREATEDEPTID, nvl( jbr.SUMTOTAL, 0 ) SUMTOTAL, bd1.DEPT_NAME SERVICEDEPTNAME, jbr1.SREQUESTID 撤销状态, --有值已撤销，没有值未撤销 jbr.IS_APP, jbr.REQUESTSTATUS FROM cd_jc.JC_BLACKLIST_REQUEST jbr LEFT JOIN "CD_JC"."JC_BLACKLIST_REQUEST" jbr1 ON jbr1.SREQUESTID = jbr.REQUESTID AND jbr1.DELETEFLAG = 1 AND jbr1.LOGICTYPE = 2 INNER JOIN "CD_JC"."JC_BLACKLIST_FLOWPATH" jbf ON jbr.CURRENTFLOWPATHID = jbf.FLOWPATHID LEFT JOIN CD_SYSTEM.SYS_DEPT bd1 ON jbf.OPERATEDEPTID = bd1.ID LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed ON sed.ENUM_VALUE = jbr.CARCOLOUR AND sed.ENUM_ID = 39 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed1 ON sed1.ENUM_VALUE = jbr.ELUDEMONEYTYPE AND sed1.ENUM_ID = 87 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed2 ON sed2.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed2.ENUM_ID = 88 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed3 ON sed3.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed3.ENUM_ID = 89 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed4 ON sed4.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed4.ENUM_ID = 90 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed5 ON sed5.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed5.ENUM_ID = 91 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed6 ON sed6.ENUM_VALUE = jbr.CARTYPE AND sed6.ENUM_ID = 40 LEFT JOIN CD_SYSTEM.SYS_DEPT sed7 ON sed7.ID = jbr.CREATEDEPTID LEFT JOIN ( SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1' ) bt2 ON bt2.ID = jbr.ENTRYSTATIONID LEFT JOIN ( SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1' ) bt3 ON bt3.ID = jbr.EXITSTATIONID WHERE jbr.DELETEFLAG = 1 AND jbr.LOGICTYPE =1 and jbr.CREATETIME>=? and jbr.CREATETIME<=sysdate ORDER BY jbr.CREATETIME desc 
2021/01/18-16:42:25 [http-nio-317-exec-8] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalBlackList-[159] ==> Parameters: 2021-01-18 00:00:00.0(Timestamp)
2021/01/18-16:42:25 [http-nio-317-exec-8] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalBlackList-[159] <==      Total: 15
2021/01/18-16:42:25 [http-nio-317-exec-8] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalGreyList-[159] ==>  Preparing: select t.REQUESTID,CARNUMBER,s2.ENUM_NAME LICENSECOLORID,CARFEATURE,round(ELUDEMONEYNUMBER/100,2) ELUDEMONEYNUMBER,round(FACTMONEYNUMBER/100,2) FACTMONEYNUMBER,s.ENUM_NAME ELUDEMONEYTYPE,s1.ENUM_NAME ELUDEMONEYTYPEITEM,s3.ENUM_NAME CARTYPE,AXLETYPE, bt2.NAME ENTRYSTATIONID, bt3.NAME EXITSTATIONID, to_char(ENTRYSTATIONTIME,'yyyy-mm-dd HH24:mi:ss') ENTRYSTATIONTIME,to_char(EXITSTATIONTIME,'yyyy-mm-dd HH24:mi:ss') EXITSTATIONTIME, nvl(TOTALWEIGHT,'') TOTALWEIGHT, decode(HAVECARD,1,'是',0,'否','') HAVECARD, decode(HAVEDAMAGEDEVICE,1,'有',0,'无','') HAVEDAMAGEDEVICE, decode(HAVEVIDEO,1,'有',0,'无','') HAVEVIDEO, nvl(CPUCARDID,'') CPUCARDID, nvl(REQUESTDESCRIPTION,'') REQUESTDESCRIPTION, to_char(t.CREATETIME,'yyyy-mm-dd HH24:mi:ss') CREATETIME, CREATEUSERNAME, s4.dept_name CREATEDEPTID, nvl(SUMTOTAL,0) SUMTOTAL, bd1.DEPT_NAME SERVICEDEPTNAME from cd_jc.JC_GRAYLIST_REQUEST t INNER JOIN "CD_JC"."JC_GRAYLIST_FLOWPATH" jbf ON t.CURRENTFLOWPATHID = jbf.FLOWPATHID LEFT JOIN CD_SYSTEM.SYS_DEPT bd1 ON jbf.DEPTID = bd1.DEPT_WORK LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s ON t.ELUDEMONEYTYPE = s.ENUM_VALUE and s.ENUM_ID = 43 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s1 ON t.ELUDEMONEYTYPEITEM = s1.ENUM_VALUE and s1.ENUM_ID = 44 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s2 ON t.LICENSECOLORID = s2.ENUM_VALUE and s2.ENUM_ID = 39 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s3 ON s3.ENUM_VALUE = t.CARTYPE AND s3.ENUM_ID = 40 LEFT JOIN CD_SYSTEM.SYS_DEPT s4 ON to_char(s4.ID) = t.CREATEDEPTID LEFT JOIN (SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1') bt2 ON bt2.ID = t.ENTRYSTATIONID LEFT JOIN (SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1') bt3 ON bt3.ID = t.EXITSTATIONID where t.CREATETIME>=? and t.CREATETIME<=sysdate order by t.CREATETIME desc 
2021/01/18-16:42:25 [http-nio-317-exec-8] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalGreyList-[159] ==> Parameters: 2021-01-18 00:00:00.0(Timestamp)
2021/01/18-16:42:28 [http-nio-317-exec-8] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalGreyList-[159] <==      Total: 4
2021/01/18-16:42:30 [http-nio-317-exec-9] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-16:42:30 [http-nio-317-exec-9] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-16:42:30 [http-nio-317-exec-9] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-16:42:30 [http-nio-317-exec-9] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/getEtcCardBlackList
2021/01/18-16:42:30 [http-nio-317-exec-9] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-16:42:30 [http-nio-317-exec-9] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController.getEtcCardBlackList
2021/01/18-16:42:30 [http-nio-317-exec-9] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[鲁NC2029]
2021/01/18-16:42:30 [http-nio-317-exec-9] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] ==>  Preparing: select t.REQUESTORDERID, sed.enum_name OICARUSERTYPE, ttt.OICARTONNAGE, ttt.OICARAXIES, ttt.OICARWIDTH, ttt.OICARLENGTH, ttt.OIHEADSTOCKHEIGHT, to_char(t.saledate, 'yyyy-mm-dd HH24:mi:ss') saledate, t.cpucardid cpucardid, ttt.oiid oiid, s.codename codename, t.plateno plateno, s1.codename cardvehiclecolor, s2.codename cardvehicletype, decode(t.cardstate, 1,'待激活', 3, '发行', 4, '挂失', 5,'黑名单（欠费）', 6, '无卡挂起', 7,'有卡挂起',8,'无卡注销', 9, '有卡注销' ) cardstate, bc.codename cardblacklisttype, to_char(bc.createdate, 'yyyy-mm-dd hh24:mi:ss') createdate, ttt.oiplateno oiplateno, ttt.oiplatecolor oiplatecolor, ttt.oicarcategory oicarcategory, decode(ttt.oistate, 3, '在用', 4, '挂失', 6, '车型不符', 9, '注销', '不可用') oistate, t.ownername ownername, i.ciclientname as ciclientname, i.cimobile as cimobile, i.citel citel, i.ciidcard ciidcard, i.cilinkman cilinkman, t.clientid clientid, ebo.OFFICENAME, su.username, eocrt.oiid oiidtemp, evi.approvedcount, (select to_char(max(aecr.avt_inserttime), 'yyyy-mm-dd HH24:mi:ss') from avt_etc_card_client_rel@db_link_2310etc aecr where aecr.plateno=t.plateno and aecr.platenocolor=t.platenocolor) aecrsaledate, (select to_char(max(aeocr.avt_inserttime), 'yyyy-mm-dd HH24:mi:ss') from avt_etc_obu_client_rel@db_link_2310etc aeocr where aeocr.oiplateno=t.plateno and aeocr.oiplatecolor=t.platenocolor) aeocrsaledate from etc_card_client_rel@db_link_2310etc t left join etc_vehicle_info@db_link_2310etc evi on evi.plateno=t.plateno and evi.platenocolor=t.platenocolor left join ETC_OBU_CLIENT_REL_TEMP@db_link_2310etc eocrt on eocrt.oiplateno=t.plateno left join ETC_BUSINESS_OFFICE@db_link_2310etc ebo on t.OFFICEID=ebo.id left join etcv3_sys_user@db_link_2310etc su on t.userid=su.id left join etc_client_info@db_link_2310etc i on t.clientid = i.id left join (select tt.oiid, tt.oiplateno, o1.codename as oiplatecolor, o2.codename as oicarcategory, tt.oistate, tt.oiplatecolor as platecolor, tt.OICARTONNAGE, tt.OICARUSERTYPE, tt.OICARAXIES, tt.OICARWIDTH, tt.OICARLENGTH, tt.OIHEADSTOCKHEIGHT from etc_obu_client_rel@db_link_2310etc tt left join etc_system_code@db_link_2310etc o1 on o1.codevalue = tt.oiplatecolor and o1.typeid = 12 left join etc_system_code@db_link_2310etc o2 on o2.codevalue = tt.oicarcategory and o2.typeid = 13) ttt on ttt.oiplateno = t.plateno and ttt.platecolor = t.platenocolor left join (select b.cpucardid, b.createdate, bs.codename from etc_card_blacklist@db_link_2310etc b left join etc_system_code@db_link_2310etc bs on b.blacklisttype = bs.codevalue and bs.typeid = 43) bc on t.cpucardid = bc.cpucardid left join etc_system_code@db_link_2310etc s on s.codevalue = nvl(t.sendid, '1001002210001001') and s.typeid = 62 left join etc_system_code@db_link_2310etc s1 on s1.codevalue = t.platenocolor and s1.typeid = 12 left join etc_system_code@db_link_2310etc s2 on s2.codevalue = t.carcategory and s2.typeid = 13 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed ON ttt.OICARUSERTYPE = sed.ENUM_VALUE and sed.ENUM_ID = 41 WHERE t.plateno =? OR t.CPUCARDID=? 
2021/01/18-16:42:30 [http-nio-317-exec-9] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] ==> Parameters: 鲁NC2029(String), 鲁NC2029(String)
2021/01/18-16:42:30 [http-nio-317-exec-9] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] <==      Total: 0
2021/01/18-16:42:39 [http-nio-317-exec-10] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-16:42:39 [http-nio-317-exec-10] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-16:42:39 [http-nio-317-exec-10] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-16:42:39 [http-nio-317-exec-10] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/getEtcCardBlackList
2021/01/18-16:42:39 [http-nio-317-exec-10] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-16:42:39 [http-nio-317-exec-10] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController.getEtcCardBlackList
2021/01/18-16:42:39 [http-nio-317-exec-10] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[津RUQ995]
2021/01/18-16:42:39 [http-nio-317-exec-10] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] ==>  Preparing: select t.REQUESTORDERID, sed.enum_name OICARUSERTYPE, ttt.OICARTONNAGE, ttt.OICARAXIES, ttt.OICARWIDTH, ttt.OICARLENGTH, ttt.OIHEADSTOCKHEIGHT, to_char(t.saledate, 'yyyy-mm-dd HH24:mi:ss') saledate, t.cpucardid cpucardid, ttt.oiid oiid, s.codename codename, t.plateno plateno, s1.codename cardvehiclecolor, s2.codename cardvehicletype, decode(t.cardstate, 1,'待激活', 3, '发行', 4, '挂失', 5,'黑名单（欠费）', 6, '无卡挂起', 7,'有卡挂起',8,'无卡注销', 9, '有卡注销' ) cardstate, bc.codename cardblacklisttype, to_char(bc.createdate, 'yyyy-mm-dd hh24:mi:ss') createdate, ttt.oiplateno oiplateno, ttt.oiplatecolor oiplatecolor, ttt.oicarcategory oicarcategory, decode(ttt.oistate, 3, '在用', 4, '挂失', 6, '车型不符', 9, '注销', '不可用') oistate, t.ownername ownername, i.ciclientname as ciclientname, i.cimobile as cimobile, i.citel citel, i.ciidcard ciidcard, i.cilinkman cilinkman, t.clientid clientid, ebo.OFFICENAME, su.username, eocrt.oiid oiidtemp, evi.approvedcount, (select to_char(max(aecr.avt_inserttime), 'yyyy-mm-dd HH24:mi:ss') from avt_etc_card_client_rel@db_link_2310etc aecr where aecr.plateno=t.plateno and aecr.platenocolor=t.platenocolor) aecrsaledate, (select to_char(max(aeocr.avt_inserttime), 'yyyy-mm-dd HH24:mi:ss') from avt_etc_obu_client_rel@db_link_2310etc aeocr where aeocr.oiplateno=t.plateno and aeocr.oiplatecolor=t.platenocolor) aeocrsaledate from etc_card_client_rel@db_link_2310etc t left join etc_vehicle_info@db_link_2310etc evi on evi.plateno=t.plateno and evi.platenocolor=t.platenocolor left join ETC_OBU_CLIENT_REL_TEMP@db_link_2310etc eocrt on eocrt.oiplateno=t.plateno left join ETC_BUSINESS_OFFICE@db_link_2310etc ebo on t.OFFICEID=ebo.id left join etcv3_sys_user@db_link_2310etc su on t.userid=su.id left join etc_client_info@db_link_2310etc i on t.clientid = i.id left join (select tt.oiid, tt.oiplateno, o1.codename as oiplatecolor, o2.codename as oicarcategory, tt.oistate, tt.oiplatecolor as platecolor, tt.OICARTONNAGE, tt.OICARUSERTYPE, tt.OICARAXIES, tt.OICARWIDTH, tt.OICARLENGTH, tt.OIHEADSTOCKHEIGHT from etc_obu_client_rel@db_link_2310etc tt left join etc_system_code@db_link_2310etc o1 on o1.codevalue = tt.oiplatecolor and o1.typeid = 12 left join etc_system_code@db_link_2310etc o2 on o2.codevalue = tt.oicarcategory and o2.typeid = 13) ttt on ttt.oiplateno = t.plateno and ttt.platecolor = t.platenocolor left join (select b.cpucardid, b.createdate, bs.codename from etc_card_blacklist@db_link_2310etc b left join etc_system_code@db_link_2310etc bs on b.blacklisttype = bs.codevalue and bs.typeid = 43) bc on t.cpucardid = bc.cpucardid left join etc_system_code@db_link_2310etc s on s.codevalue = nvl(t.sendid, '1001002210001001') and s.typeid = 62 left join etc_system_code@db_link_2310etc s1 on s1.codevalue = t.platenocolor and s1.typeid = 12 left join etc_system_code@db_link_2310etc s2 on s2.codevalue = t.carcategory and s2.typeid = 13 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed ON ttt.OICARUSERTYPE = sed.ENUM_VALUE and sed.ENUM_ID = 41 WHERE t.plateno =? OR t.CPUCARDID=? 
2021/01/18-16:42:39 [http-nio-317-exec-10] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] ==> Parameters: 津RUQ995(String), 津RUQ995(String)
2021/01/18-16:42:42 [http-nio-317-exec-10] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] <==      Total: 1
2021/01/18-16:43:34 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-16:43:34 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-16:43:34 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-16:43:34 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/addOperationLogFiles
2021/01/18-16:43:34 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-16:43:34 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.OwerController.exceptionMethod
2021/01/18-16:43:34 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[org.springframework.web.bind.MissingServletRequestParameterException: Required String parameter 'vehicle' is not present]
2021/01/18-16:43:34 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.controller.OwerController-[140] Required String parameter 'vehicle' is not present
2021/01/18-16:49:56 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-16:49:56 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-16:49:56 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-16:49:56 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/getNewVersionFilePath
2021/01/18-16:49:56 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-16:49:56 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController.getNewVersionFilePath
2021/01/18-16:49:56 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[]
2021/01/18-16:49:56 [http-nio-317-exec-4] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAppETCCardMapper.getNewVersionFilePath-[159] ==>  Preparing: SELECT VERSION,URLPATH FROM CD_JC.JC_APP_VERSION where rownum=1 ORDER BY VERSION desc 
2021/01/18-16:49:56 [http-nio-317-exec-4] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAppETCCardMapper.getNewVersionFilePath-[159] ==> Parameters: 
2021/01/18-16:49:56 [http-nio-317-exec-4] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAppETCCardMapper.getNewVersionFilePath-[159] <==      Total: 1
2021/01/18-16:49:59 [http-nio-317-exec-5] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] ==>  Preparing: select t.ID as deptId,t.PARENT_ID as deptParentId,t.DEPT_NAME as deptName,t.DEPT_WORK as deptWork,u.LOGIN_NAME as loginName,u.USER_NAME as userName,u.PASSWORD as password,u.ID as userId,u.LAST_PASSWORD_MODIFY_TIME lastPasswordModifyTime,u.PASSWORD_HISTORY passwordHistory, t.PRIVILEGE_ID as privilegeId ,u.VALID_STATUS as validStatus,(select wm_concat(ROLE_ID) from SYS_USER_ROLES where USER_ID= u.ID) roleIds,t.DEPT_LONG_ID deptLongId, t.WORKFLOWDEPTROLE workFlowDeptRole from SYS_USERS u left join SYS_DEPT t on t.ID = u.DEPT_ID where u.LOGIN_NAME = ? 
2021/01/18-16:49:59 [http-nio-317-exec-5] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] ==> Parameters: 1111111(String)
2021/01/18-16:49:59 [http-nio-317-exec-5] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] <==      Total: 1
2021/01/18-16:49:59 [http-nio-317-exec-7] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-16:49:59 [http-nio-317-exec-7] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-16:49:59 [http-nio-317-exec-7] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-16:49:59 [http-nio-317-exec-7] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/getBlackOrGreyListByVehicle
2021/01/18-16:49:59 [http-nio-317-exec-7] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-16:49:59 [http-nio-317-exec-7] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController.getBlackListByVehicle
2021/01/18-16:49:59 [http-nio-317-exec-7] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[null]
2021/01/18-16:49:59 [http-nio-317-exec-7] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalBlackList-[159] ==>  Preparing: SELECT jbr.REQUESTID, jbr.CARNUMBER, sed.ENUM_NAME CARCOLOUR, jbr.CARFEATURE, round( jbr.ELUDEMONEYNUMBER / 100, 2 ) ELUDEMONEYNUMBER, round( jbr.FACTMONEYNUMBER / 100, 2 ) FACTMONEYNUMBER, sed1.ENUM_NAME ELUDEMONEYTYPE, CASE WHEN jbr.ELUDEMONEYTYPE = 1001 THEN sed2.ENUM_NAME WHEN jbr.ELUDEMONEYTYPE = 1002 THEN sed3.ENUM_NAME WHEN jbr.ELUDEMONEYTYPE = 1003 THEN sed4.ENUM_NAME WHEN jbr.ELUDEMONEYTYPE = 1004 THEN sed5.ENUM_NAME END ELUDEMONEYTYPEITEMNAME, sed6.ENUM_NAME CARTYPE, jbr.AXLETYPE, bt2.NAME ENTRYSTATIONID, bt3.NAME EXITSTATIONID, to_char( jbr.ENTRYSTATIONTIME, 'yyyy-mm-dd HH24:mi:ss' ) ENTRYSTATIONTIME, to_char( jbr.EXITSTATIONTIME, 'yyyy-mm-dd HH24:mi:ss' ) EXITSTATIONTIME, nvl( jbr.TOTALWEIGHT, '' ) TOTALWEIGHT, decode( jbr.HAVECARD, 1, '是', 0, '否', '' ) HAVECARD, decode( jbr.HAVEDAMAGEDEVICE, 1, '有', 0, '无', '' ) HAVEDAMAGEDEVICE, decode( jbr.HAVEVIDEO, 1, '有', 0, '无', '' ) HAVEVIDEO, nvl( jbr.CPUCARDID, '' ) CPUCARDID, nvl( jbr.REQUESTDESCRIPTION, '' ) REQUESTDESCRIPTION, to_char( jbr.CREATETIME, 'yyyy-mm-dd HH24:mi:ss' ) CREATETIME, jbr.CREATEUSERNAME, sed7.dept_name CREATEDEPTID, nvl( jbr.SUMTOTAL, 0 ) SUMTOTAL, bd1.DEPT_NAME SERVICEDEPTNAME, jbr1.SREQUESTID 撤销状态, --有值已撤销，没有值未撤销 jbr.IS_APP, jbr.REQUESTSTATUS FROM cd_jc.JC_BLACKLIST_REQUEST jbr LEFT JOIN "CD_JC"."JC_BLACKLIST_REQUEST" jbr1 ON jbr1.SREQUESTID = jbr.REQUESTID AND jbr1.DELETEFLAG = 1 AND jbr1.LOGICTYPE = 2 INNER JOIN "CD_JC"."JC_BLACKLIST_FLOWPATH" jbf ON jbr.CURRENTFLOWPATHID = jbf.FLOWPATHID LEFT JOIN CD_SYSTEM.SYS_DEPT bd1 ON jbf.OPERATEDEPTID = bd1.ID LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed ON sed.ENUM_VALUE = jbr.CARCOLOUR AND sed.ENUM_ID = 39 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed1 ON sed1.ENUM_VALUE = jbr.ELUDEMONEYTYPE AND sed1.ENUM_ID = 87 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed2 ON sed2.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed2.ENUM_ID = 88 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed3 ON sed3.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed3.ENUM_ID = 89 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed4 ON sed4.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed4.ENUM_ID = 90 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed5 ON sed5.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed5.ENUM_ID = 91 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed6 ON sed6.ENUM_VALUE = jbr.CARTYPE AND sed6.ENUM_ID = 40 LEFT JOIN CD_SYSTEM.SYS_DEPT sed7 ON sed7.ID = jbr.CREATEDEPTID LEFT JOIN ( SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1' ) bt2 ON bt2.ID = jbr.ENTRYSTATIONID LEFT JOIN ( SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1' ) bt3 ON bt3.ID = jbr.EXITSTATIONID WHERE jbr.DELETEFLAG = 1 AND jbr.LOGICTYPE =1 and jbr.CREATETIME>=? and jbr.CREATETIME<=sysdate ORDER BY jbr.CREATETIME desc 
2021/01/18-16:49:59 [http-nio-317-exec-7] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalBlackList-[159] ==> Parameters: 2021-01-18 00:00:00.0(Timestamp)
2021/01/18-16:49:59 [http-nio-317-exec-7] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalBlackList-[159] <==      Total: 16
2021/01/18-16:49:59 [http-nio-317-exec-7] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalGreyList-[159] ==>  Preparing: select t.REQUESTID,CARNUMBER,s2.ENUM_NAME LICENSECOLORID,CARFEATURE,round(ELUDEMONEYNUMBER/100,2) ELUDEMONEYNUMBER,round(FACTMONEYNUMBER/100,2) FACTMONEYNUMBER,s.ENUM_NAME ELUDEMONEYTYPE,s1.ENUM_NAME ELUDEMONEYTYPEITEM,s3.ENUM_NAME CARTYPE,AXLETYPE, bt2.NAME ENTRYSTATIONID, bt3.NAME EXITSTATIONID, to_char(ENTRYSTATIONTIME,'yyyy-mm-dd HH24:mi:ss') ENTRYSTATIONTIME,to_char(EXITSTATIONTIME,'yyyy-mm-dd HH24:mi:ss') EXITSTATIONTIME, nvl(TOTALWEIGHT,'') TOTALWEIGHT, decode(HAVECARD,1,'是',0,'否','') HAVECARD, decode(HAVEDAMAGEDEVICE,1,'有',0,'无','') HAVEDAMAGEDEVICE, decode(HAVEVIDEO,1,'有',0,'无','') HAVEVIDEO, nvl(CPUCARDID,'') CPUCARDID, nvl(REQUESTDESCRIPTION,'') REQUESTDESCRIPTION, to_char(t.CREATETIME,'yyyy-mm-dd HH24:mi:ss') CREATETIME, CREATEUSERNAME, s4.dept_name CREATEDEPTID, nvl(SUMTOTAL,0) SUMTOTAL, bd1.DEPT_NAME SERVICEDEPTNAME from cd_jc.JC_GRAYLIST_REQUEST t INNER JOIN "CD_JC"."JC_GRAYLIST_FLOWPATH" jbf ON t.CURRENTFLOWPATHID = jbf.FLOWPATHID LEFT JOIN CD_SYSTEM.SYS_DEPT bd1 ON jbf.DEPTID = bd1.DEPT_WORK LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s ON t.ELUDEMONEYTYPE = s.ENUM_VALUE and s.ENUM_ID = 43 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s1 ON t.ELUDEMONEYTYPEITEM = s1.ENUM_VALUE and s1.ENUM_ID = 44 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s2 ON t.LICENSECOLORID = s2.ENUM_VALUE and s2.ENUM_ID = 39 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s3 ON s3.ENUM_VALUE = t.CARTYPE AND s3.ENUM_ID = 40 LEFT JOIN CD_SYSTEM.SYS_DEPT s4 ON to_char(s4.ID) = t.CREATEDEPTID LEFT JOIN (SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1') bt2 ON bt2.ID = t.ENTRYSTATIONID LEFT JOIN (SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1') bt3 ON bt3.ID = t.EXITSTATIONID where t.CREATETIME>=? and t.CREATETIME<=sysdate order by t.CREATETIME desc 
2021/01/18-16:49:59 [http-nio-317-exec-7] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalGreyList-[159] ==> Parameters: 2021-01-18 00:00:00.0(Timestamp)
2021/01/18-16:50:00 [http-nio-317-exec-7] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalGreyList-[159] <==      Total: 5
2021/01/18-16:50:03 [http-nio-317-exec-6] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-16:50:03 [http-nio-317-exec-6] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-16:50:03 [http-nio-317-exec-6] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-16:50:03 [http-nio-317-exec-6] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/getEtcCardBlackList
2021/01/18-16:50:03 [http-nio-317-exec-6] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-16:50:03 [http-nio-317-exec-6] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController.getEtcCardBlackList
2021/01/18-16:50:03 [http-nio-317-exec-6] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[津RUQ995]
2021/01/18-16:50:03 [http-nio-317-exec-6] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] ==>  Preparing: select t.REQUESTORDERID, sed.enum_name OICARUSERTYPE, ttt.OICARTONNAGE, ttt.OICARAXIES, ttt.OICARWIDTH, ttt.OICARLENGTH, ttt.OIHEADSTOCKHEIGHT, to_char(t.saledate, 'yyyy-mm-dd HH24:mi:ss') saledate, t.cpucardid cpucardid, ttt.oiid oiid, s.codename codename, t.plateno plateno, s1.codename cardvehiclecolor, s2.codename cardvehicletype, decode(t.cardstate, 1,'待激活', 3, '发行', 4, '挂失', 5,'黑名单（欠费）', 6, '无卡挂起', 7,'有卡挂起',8,'无卡注销', 9, '有卡注销' ) cardstate, bc.codename cardblacklisttype, to_char(bc.createdate, 'yyyy-mm-dd hh24:mi:ss') createdate, ttt.oiplateno oiplateno, ttt.oiplatecolor oiplatecolor, ttt.oicarcategory oicarcategory, decode(ttt.oistate, 3, '在用', 4, '挂失', 6, '车型不符', 9, '注销', '不可用') oistate, t.ownername ownername, i.ciclientname as ciclientname, i.cimobile as cimobile, i.citel citel, i.ciidcard ciidcard, i.cilinkman cilinkman, t.clientid clientid, ebo.OFFICENAME, su.username, eocrt.oiid oiidtemp, evi.approvedcount, (select to_char(max(aecr.avt_inserttime), 'yyyy-mm-dd HH24:mi:ss') from avt_etc_card_client_rel@db_link_2310etc aecr where aecr.plateno=t.plateno and aecr.platenocolor=t.platenocolor) aecrsaledate, (select to_char(max(aeocr.avt_inserttime), 'yyyy-mm-dd HH24:mi:ss') from avt_etc_obu_client_rel@db_link_2310etc aeocr where aeocr.oiplateno=t.plateno and aeocr.oiplatecolor=t.platenocolor) aeocrsaledate from etc_card_client_rel@db_link_2310etc t left join etc_vehicle_info@db_link_2310etc evi on evi.plateno=t.plateno and evi.platenocolor=t.platenocolor left join ETC_OBU_CLIENT_REL_TEMP@db_link_2310etc eocrt on eocrt.oiplateno=t.plateno left join ETC_BUSINESS_OFFICE@db_link_2310etc ebo on t.OFFICEID=ebo.id left join etcv3_sys_user@db_link_2310etc su on t.userid=su.id left join etc_client_info@db_link_2310etc i on t.clientid = i.id left join (select tt.oiid, tt.oiplateno, o1.codename as oiplatecolor, o2.codename as oicarcategory, tt.oistate, tt.oiplatecolor as platecolor, tt.OICARTONNAGE, tt.OICARUSERTYPE, tt.OICARAXIES, tt.OICARWIDTH, tt.OICARLENGTH, tt.OIHEADSTOCKHEIGHT from etc_obu_client_rel@db_link_2310etc tt left join etc_system_code@db_link_2310etc o1 on o1.codevalue = tt.oiplatecolor and o1.typeid = 12 left join etc_system_code@db_link_2310etc o2 on o2.codevalue = tt.oicarcategory and o2.typeid = 13) ttt on ttt.oiplateno = t.plateno and ttt.platecolor = t.platenocolor left join (select b.cpucardid, b.createdate, bs.codename from etc_card_blacklist@db_link_2310etc b left join etc_system_code@db_link_2310etc bs on b.blacklisttype = bs.codevalue and bs.typeid = 43) bc on t.cpucardid = bc.cpucardid left join etc_system_code@db_link_2310etc s on s.codevalue = nvl(t.sendid, '1001002210001001') and s.typeid = 62 left join etc_system_code@db_link_2310etc s1 on s1.codevalue = t.platenocolor and s1.typeid = 12 left join etc_system_code@db_link_2310etc s2 on s2.codevalue = t.carcategory and s2.typeid = 13 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed ON ttt.OICARUSERTYPE = sed.ENUM_VALUE and sed.ENUM_ID = 41 WHERE t.plateno =? OR t.CPUCARDID=? 
2021/01/18-16:50:03 [http-nio-317-exec-6] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] ==> Parameters: 津RUQ995(String), 津RUQ995(String)
2021/01/18-16:50:06 [http-nio-317-exec-6] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] <==      Total: 1
2021/01/18-16:50:27 [http-nio-317-exec-8] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-16:50:27 [http-nio-317-exec-8] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-16:50:27 [http-nio-317-exec-8] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-16:50:27 [http-nio-317-exec-8] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/addOperationLogFiles
2021/01/18-16:50:27 [http-nio-317-exec-8] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-16:50:27 [http-nio-317-exec-8] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.OwerController.exceptionMethod
2021/01/18-16:50:27 [http-nio-317-exec-8] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'; nested exception is java.lang.NumberFormatException: For input string: "蓝色"]
2021/01/18-16:50:27 [http-nio-317-exec-8] INFO  com.tuozhi.zhlw.admin.jcApp.controller.OwerController-[140] Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'; nested exception is java.lang.NumberFormatException: For input string: "蓝色"
2021/01/18-16:53:36 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-16:53:36 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-16:53:36 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-16:53:36 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/getNewVersionFilePath
2021/01/18-16:53:36 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-16:53:36 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController.getNewVersionFilePath
2021/01/18-16:53:36 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[]
2021/01/18-16:53:36 [http-nio-317-exec-1] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAppETCCardMapper.getNewVersionFilePath-[159] ==>  Preparing: SELECT VERSION,URLPATH FROM CD_JC.JC_APP_VERSION where rownum=1 ORDER BY VERSION desc 
2021/01/18-16:53:36 [http-nio-317-exec-1] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAppETCCardMapper.getNewVersionFilePath-[159] ==> Parameters: 
2021/01/18-16:53:36 [http-nio-317-exec-1] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAppETCCardMapper.getNewVersionFilePath-[159] <==      Total: 1
2021/01/18-16:53:37 [http-nio-317-exec-2] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] ==>  Preparing: select t.ID as deptId,t.PARENT_ID as deptParentId,t.DEPT_NAME as deptName,t.DEPT_WORK as deptWork,u.LOGIN_NAME as loginName,u.USER_NAME as userName,u.PASSWORD as password,u.ID as userId,u.LAST_PASSWORD_MODIFY_TIME lastPasswordModifyTime,u.PASSWORD_HISTORY passwordHistory, t.PRIVILEGE_ID as privilegeId ,u.VALID_STATUS as validStatus,(select wm_concat(ROLE_ID) from SYS_USER_ROLES where USER_ID= u.ID) roleIds,t.DEPT_LONG_ID deptLongId, t.WORKFLOWDEPTROLE workFlowDeptRole from SYS_USERS u left join SYS_DEPT t on t.ID = u.DEPT_ID where u.LOGIN_NAME = ? 
2021/01/18-16:53:37 [http-nio-317-exec-2] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] ==> Parameters: 1111111(String)
2021/01/18-16:53:37 [http-nio-317-exec-2] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] <==      Total: 1
2021/01/18-16:53:37 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-16:53:37 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-16:53:37 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-16:53:37 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/getBlackOrGreyListByVehicle
2021/01/18-16:53:37 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-16:53:37 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController.getBlackListByVehicle
2021/01/18-16:53:37 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[null]
2021/01/18-16:53:37 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalBlackList-[159] ==>  Preparing: SELECT jbr.REQUESTID, jbr.CARNUMBER, sed.ENUM_NAME CARCOLOUR, jbr.CARFEATURE, round( jbr.ELUDEMONEYNUMBER / 100, 2 ) ELUDEMONEYNUMBER, round( jbr.FACTMONEYNUMBER / 100, 2 ) FACTMONEYNUMBER, sed1.ENUM_NAME ELUDEMONEYTYPE, CASE WHEN jbr.ELUDEMONEYTYPE = 1001 THEN sed2.ENUM_NAME WHEN jbr.ELUDEMONEYTYPE = 1002 THEN sed3.ENUM_NAME WHEN jbr.ELUDEMONEYTYPE = 1003 THEN sed4.ENUM_NAME WHEN jbr.ELUDEMONEYTYPE = 1004 THEN sed5.ENUM_NAME END ELUDEMONEYTYPEITEMNAME, sed6.ENUM_NAME CARTYPE, jbr.AXLETYPE, bt2.NAME ENTRYSTATIONID, bt3.NAME EXITSTATIONID, to_char( jbr.ENTRYSTATIONTIME, 'yyyy-mm-dd HH24:mi:ss' ) ENTRYSTATIONTIME, to_char( jbr.EXITSTATIONTIME, 'yyyy-mm-dd HH24:mi:ss' ) EXITSTATIONTIME, nvl( jbr.TOTALWEIGHT, '' ) TOTALWEIGHT, decode( jbr.HAVECARD, 1, '是', 0, '否', '' ) HAVECARD, decode( jbr.HAVEDAMAGEDEVICE, 1, '有', 0, '无', '' ) HAVEDAMAGEDEVICE, decode( jbr.HAVEVIDEO, 1, '有', 0, '无', '' ) HAVEVIDEO, nvl( jbr.CPUCARDID, '' ) CPUCARDID, nvl( jbr.REQUESTDESCRIPTION, '' ) REQUESTDESCRIPTION, to_char( jbr.CREATETIME, 'yyyy-mm-dd HH24:mi:ss' ) CREATETIME, jbr.CREATEUSERNAME, sed7.dept_name CREATEDEPTID, nvl( jbr.SUMTOTAL, 0 ) SUMTOTAL, bd1.DEPT_NAME SERVICEDEPTNAME, jbr1.SREQUESTID 撤销状态, --有值已撤销，没有值未撤销 jbr.IS_APP, jbr.REQUESTSTATUS FROM cd_jc.JC_BLACKLIST_REQUEST jbr LEFT JOIN "CD_JC"."JC_BLACKLIST_REQUEST" jbr1 ON jbr1.SREQUESTID = jbr.REQUESTID AND jbr1.DELETEFLAG = 1 AND jbr1.LOGICTYPE = 2 INNER JOIN "CD_JC"."JC_BLACKLIST_FLOWPATH" jbf ON jbr.CURRENTFLOWPATHID = jbf.FLOWPATHID LEFT JOIN CD_SYSTEM.SYS_DEPT bd1 ON jbf.OPERATEDEPTID = bd1.ID LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed ON sed.ENUM_VALUE = jbr.CARCOLOUR AND sed.ENUM_ID = 39 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed1 ON sed1.ENUM_VALUE = jbr.ELUDEMONEYTYPE AND sed1.ENUM_ID = 87 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed2 ON sed2.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed2.ENUM_ID = 88 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed3 ON sed3.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed3.ENUM_ID = 89 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed4 ON sed4.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed4.ENUM_ID = 90 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed5 ON sed5.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed5.ENUM_ID = 91 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed6 ON sed6.ENUM_VALUE = jbr.CARTYPE AND sed6.ENUM_ID = 40 LEFT JOIN CD_SYSTEM.SYS_DEPT sed7 ON sed7.ID = jbr.CREATEDEPTID LEFT JOIN ( SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1' ) bt2 ON bt2.ID = jbr.ENTRYSTATIONID LEFT JOIN ( SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1' ) bt3 ON bt3.ID = jbr.EXITSTATIONID WHERE jbr.DELETEFLAG = 1 AND jbr.LOGICTYPE =1 and jbr.CREATETIME>=? and jbr.CREATETIME<=sysdate ORDER BY jbr.CREATETIME desc 
2021/01/18-16:53:37 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalBlackList-[159] ==> Parameters: 2021-01-18 00:00:00.0(Timestamp)
2021/01/18-16:53:38 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalBlackList-[159] <==      Total: 16
2021/01/18-16:53:38 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalGreyList-[159] ==>  Preparing: select t.REQUESTID,CARNUMBER,s2.ENUM_NAME LICENSECOLORID,CARFEATURE,round(ELUDEMONEYNUMBER/100,2) ELUDEMONEYNUMBER,round(FACTMONEYNUMBER/100,2) FACTMONEYNUMBER,s.ENUM_NAME ELUDEMONEYTYPE,s1.ENUM_NAME ELUDEMONEYTYPEITEM,s3.ENUM_NAME CARTYPE,AXLETYPE, bt2.NAME ENTRYSTATIONID, bt3.NAME EXITSTATIONID, to_char(ENTRYSTATIONTIME,'yyyy-mm-dd HH24:mi:ss') ENTRYSTATIONTIME,to_char(EXITSTATIONTIME,'yyyy-mm-dd HH24:mi:ss') EXITSTATIONTIME, nvl(TOTALWEIGHT,'') TOTALWEIGHT, decode(HAVECARD,1,'是',0,'否','') HAVECARD, decode(HAVEDAMAGEDEVICE,1,'有',0,'无','') HAVEDAMAGEDEVICE, decode(HAVEVIDEO,1,'有',0,'无','') HAVEVIDEO, nvl(CPUCARDID,'') CPUCARDID, nvl(REQUESTDESCRIPTION,'') REQUESTDESCRIPTION, to_char(t.CREATETIME,'yyyy-mm-dd HH24:mi:ss') CREATETIME, CREATEUSERNAME, s4.dept_name CREATEDEPTID, nvl(SUMTOTAL,0) SUMTOTAL, bd1.DEPT_NAME SERVICEDEPTNAME from cd_jc.JC_GRAYLIST_REQUEST t INNER JOIN "CD_JC"."JC_GRAYLIST_FLOWPATH" jbf ON t.CURRENTFLOWPATHID = jbf.FLOWPATHID LEFT JOIN CD_SYSTEM.SYS_DEPT bd1 ON jbf.DEPTID = bd1.DEPT_WORK LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s ON t.ELUDEMONEYTYPE = s.ENUM_VALUE and s.ENUM_ID = 43 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s1 ON t.ELUDEMONEYTYPEITEM = s1.ENUM_VALUE and s1.ENUM_ID = 44 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s2 ON t.LICENSECOLORID = s2.ENUM_VALUE and s2.ENUM_ID = 39 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s3 ON s3.ENUM_VALUE = t.CARTYPE AND s3.ENUM_ID = 40 LEFT JOIN CD_SYSTEM.SYS_DEPT s4 ON to_char(s4.ID) = t.CREATEDEPTID LEFT JOIN (SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1') bt2 ON bt2.ID = t.ENTRYSTATIONID LEFT JOIN (SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1') bt3 ON bt3.ID = t.EXITSTATIONID where t.CREATETIME>=? and t.CREATETIME<=sysdate order by t.CREATETIME desc 
2021/01/18-16:53:38 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalGreyList-[159] ==> Parameters: 2021-01-18 00:00:00.0(Timestamp)
2021/01/18-16:53:38 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalGreyList-[159] <==      Total: 5
2021/01/18-16:53:42 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-16:53:42 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-16:53:42 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-16:53:42 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/getEtcCardBlackList
2021/01/18-16:53:42 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-16:53:42 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController.getEtcCardBlackList
2021/01/18-16:53:42 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[津RUQ995]
2021/01/18-16:53:42 [http-nio-317-exec-4] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] ==>  Preparing: select t.REQUESTORDERID, sed.enum_name OICARUSERTYPE, ttt.OICARTONNAGE, ttt.OICARAXIES, ttt.OICARWIDTH, ttt.OICARLENGTH, ttt.OIHEADSTOCKHEIGHT, to_char(t.saledate, 'yyyy-mm-dd HH24:mi:ss') saledate, t.cpucardid cpucardid, ttt.oiid oiid, s.codename codename, t.plateno plateno, s1.codename cardvehiclecolor, s2.codename cardvehicletype, decode(t.cardstate, 1,'待激活', 3, '发行', 4, '挂失', 5,'黑名单（欠费）', 6, '无卡挂起', 7,'有卡挂起',8,'无卡注销', 9, '有卡注销' ) cardstate, bc.codename cardblacklisttype, to_char(bc.createdate, 'yyyy-mm-dd hh24:mi:ss') createdate, ttt.oiplateno oiplateno, ttt.oiplatecolor oiplatecolor, ttt.oicarcategory oicarcategory, decode(ttt.oistate, 3, '在用', 4, '挂失', 6, '车型不符', 9, '注销', '不可用') oistate, t.ownername ownername, i.ciclientname as ciclientname, i.cimobile as cimobile, i.citel citel, i.ciidcard ciidcard, i.cilinkman cilinkman, t.clientid clientid, ebo.OFFICENAME, su.username, eocrt.oiid oiidtemp, evi.approvedcount, (select to_char(max(aecr.avt_inserttime), 'yyyy-mm-dd HH24:mi:ss') from avt_etc_card_client_rel@db_link_2310etc aecr where aecr.plateno=t.plateno and aecr.platenocolor=t.platenocolor) aecrsaledate, (select to_char(max(aeocr.avt_inserttime), 'yyyy-mm-dd HH24:mi:ss') from avt_etc_obu_client_rel@db_link_2310etc aeocr where aeocr.oiplateno=t.plateno and aeocr.oiplatecolor=t.platenocolor) aeocrsaledate from etc_card_client_rel@db_link_2310etc t left join etc_vehicle_info@db_link_2310etc evi on evi.plateno=t.plateno and evi.platenocolor=t.platenocolor left join ETC_OBU_CLIENT_REL_TEMP@db_link_2310etc eocrt on eocrt.oiplateno=t.plateno left join ETC_BUSINESS_OFFICE@db_link_2310etc ebo on t.OFFICEID=ebo.id left join etcv3_sys_user@db_link_2310etc su on t.userid=su.id left join etc_client_info@db_link_2310etc i on t.clientid = i.id left join (select tt.oiid, tt.oiplateno, o1.codename as oiplatecolor, o2.codename as oicarcategory, tt.oistate, tt.oiplatecolor as platecolor, tt.OICARTONNAGE, tt.OICARUSERTYPE, tt.OICARAXIES, tt.OICARWIDTH, tt.OICARLENGTH, tt.OIHEADSTOCKHEIGHT from etc_obu_client_rel@db_link_2310etc tt left join etc_system_code@db_link_2310etc o1 on o1.codevalue = tt.oiplatecolor and o1.typeid = 12 left join etc_system_code@db_link_2310etc o2 on o2.codevalue = tt.oicarcategory and o2.typeid = 13) ttt on ttt.oiplateno = t.plateno and ttt.platecolor = t.platenocolor left join (select b.cpucardid, b.createdate, bs.codename from etc_card_blacklist@db_link_2310etc b left join etc_system_code@db_link_2310etc bs on b.blacklisttype = bs.codevalue and bs.typeid = 43) bc on t.cpucardid = bc.cpucardid left join etc_system_code@db_link_2310etc s on s.codevalue = nvl(t.sendid, '1001002210001001') and s.typeid = 62 left join etc_system_code@db_link_2310etc s1 on s1.codevalue = t.platenocolor and s1.typeid = 12 left join etc_system_code@db_link_2310etc s2 on s2.codevalue = t.carcategory and s2.typeid = 13 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed ON ttt.OICARUSERTYPE = sed.ENUM_VALUE and sed.ENUM_ID = 41 WHERE t.plateno =? OR t.CPUCARDID=? 
2021/01/18-16:53:42 [http-nio-317-exec-4] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] ==> Parameters: 津RUQ995(String), 津RUQ995(String)
2021/01/18-16:53:44 [http-nio-317-exec-4] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] <==      Total: 1
2021/01/18-16:54:09 [http-nio-317-exec-5] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-16:54:09 [http-nio-317-exec-5] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-16:54:09 [http-nio-317-exec-5] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-16:54:09 [http-nio-317-exec-5] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/addOperationLogFiles
2021/01/18-16:54:09 [http-nio-317-exec-5] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-16:54:09 [http-nio-317-exec-5] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController.addOperationLogFiles
2021/01/18-16:54:09 [http-nio-317-exec-5] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[津RUQ995, 0, org.springframework.web.multipart.support.StandardMultipartHttpServletRequest@99f41a1, [Lorg.springframework.web.multipart.MultipartFile;@31a8a5f0]
2021/01/18-16:54:09 [http-nio-317-exec-5] ERROR com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController-[347] error
java.lang.RuntimeException: null
	at com.tuozhi.zhlw.admin.jc.service.impl.JcLogServiceImpl.addOperationLogFiles(JcLogServiceImpl.java:128)
	at com.tuozhi.zhlw.admin.jc.service.impl.JcLogServiceImpl$$FastClassBySpringCGLIB$$bcb2204a.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:99)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.tuozhi.zhlw.admin.jc.service.impl.JcLogServiceImpl$$EnhancerBySpringCGLIB$$ea715277.addOperationLogFiles(<generated>)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController.addOperationLogFiles(JCAuditStatusController.java:345)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController$$FastClassBySpringCGLIB$$5151cd04.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect.around(SysLoginAspect.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController$$EnhancerBySpringCGLIB$$a7d24720.addOperationLogFiles(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.tuozhi.zhlw.admin.config.CorsFilter.doFilter(CorsFilter.java:29)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2021/01/18-16:55:04 [http-nio-317-exec-6] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-16:55:04 [http-nio-317-exec-6] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-16:55:04 [http-nio-317-exec-6] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-16:55:04 [http-nio-317-exec-6] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/addOperationLogFiles
2021/01/18-16:55:04 [http-nio-317-exec-6] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-16:55:04 [http-nio-317-exec-6] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController.addOperationLogFiles
2021/01/18-16:55:04 [http-nio-317-exec-6] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[津RUQ995, 0, org.springframework.web.multipart.support.StandardMultipartHttpServletRequest@913dcb, [Lorg.springframework.web.multipart.MultipartFile;@e56c3a9]
2021/01/18-16:55:22 [http-nio-317-exec-6] ERROR com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController-[347] error
java.lang.RuntimeException: null
	at com.tuozhi.zhlw.admin.jc.service.impl.JcLogServiceImpl.addOperationLogFiles(JcLogServiceImpl.java:128)
	at com.tuozhi.zhlw.admin.jc.service.impl.JcLogServiceImpl$$FastClassBySpringCGLIB$$bcb2204a.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:99)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.tuozhi.zhlw.admin.jc.service.impl.JcLogServiceImpl$$EnhancerBySpringCGLIB$$ea715277.addOperationLogFiles(<generated>)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController.addOperationLogFiles(JCAuditStatusController.java:345)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController$$FastClassBySpringCGLIB$$5151cd04.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect.around(SysLoginAspect.java:77)
	at sun.reflect.GeneratedMethodAccessor183.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController$$EnhancerBySpringCGLIB$$a7d24720.addOperationLogFiles(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.tuozhi.zhlw.admin.config.CorsFilter.doFilter(CorsFilter.java:29)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2021/01/18-16:57:37 [SpringContextShutdownHook] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler-[208] Shutting down ExecutorService 'taskScheduler'
2021/01/18-16:57:37 [SpringContextShutdownHook] INFO  org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean-[598] Closing JPA EntityManagerFactory for persistence unit 'default'
2021/01/18-16:57:37 [SpringContextShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource-[1965] {dataSource-1} closing ...
2021/01/18-16:57:37 [SpringContextShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource-[2037] {dataSource-1} closed
2021/01/18-16:57:50 [main] INFO  com.tuozhi.zhlw.admin.MyApplication-[55] Starting MyApplication on tz002-PC with PID 824 (D:\JCAPP\cd-jcApp\cd-zhlw-web-admin\target\classes started by tz008 in D:\JCAPP\cd-jcApp)
2021/01/18-16:57:50 [main] DEBUG com.tuozhi.zhlw.admin.MyApplication-[56] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2021/01/18-16:57:50 [main] INFO  com.tuozhi.zhlw.admin.MyApplication-[655] The following profiles are active: dev
2021/01/18-16:57:51 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[249] Multiple Spring Data modules found, entering strict repository configuration mode!
2021/01/18-16:57:51 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[127] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021/01/18-16:57:51 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[187] Finished Spring Data repository scanning in 75ms. Found 3 JPA repository interfaces.
2021/01/18-16:57:51 [main] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner-[239] Skipping MapperFactoryBean with name 'workFlowNodeMapper' and 'com.tuozhi.zhlw.admin.jc.mapper.WorkFlowNodeMapper' mapperInterface. Bean already defined with the same name!
2021/01/18-16:57:51 [main] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner-[166] No MyBatis mapper was found in '[com.tuozhi.zhlw.admin]' package. Please check your configuration.
2021/01/18-16:57:51 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[249] Multiple Spring Data modules found, entering strict repository configuration mode!
2021/01/18-16:57:51 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[127] Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2021/01/18-16:57:51 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport-[348] Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tuozhi.zhlw.admin.dao.SysAppDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2021/01/18-16:57:51 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport-[348] Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tuozhi.zhlw.admin.dao.SysLogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2021/01/18-16:57:51 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport-[348] Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tuozhi.zhlw.admin.dao.SysMenuDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2021/01/18-16:57:51 [main] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate-[187] Finished Spring Data repository scanning in 45ms. Found 0 Redis repository interfaces.
2021/01/18-16:57:51 [main] INFO  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker-[330] Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021/01/18-16:57:52 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer-[92] Tomcat initialized with port(s): 317 (http)
2021/01/18-16:57:52 [main] INFO  org.apache.coyote.http11.Http11NioProtocol-[173] Initializing ProtocolHandler ["http-nio-317"]
2021/01/18-16:57:52 [main] INFO  org.apache.catalina.core.StandardService-[173] Starting service [Tomcat]
2021/01/18-16:57:52 [main] INFO  org.apache.catalina.core.StandardEngine-[173] Starting Servlet engine: [Apache Tomcat/9.0.29]
2021/01/18-16:57:52 [main] INFO  org.apache.jasper.servlet.TldScanner-[173] At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2021/01/18-16:57:52 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]-[173] Initializing Spring embedded WebApplicationContext
2021/01/18-16:57:52 [main] INFO  org.springframework.web.context.ContextLoader-[284] Root WebApplicationContext: initialization completed in 2551 ms
2021/01/18-16:57:53 [main] INFO  org.springframework.boot.web.servlet.RegistrationBean-[110] Filter characterEncodingFilter was not registered (possibly already registered?)
2021/01/18-16:57:53 [main] INFO  com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure-[56] Init DruidDataSource
2021/01/18-16:57:53 [main] WARN  com.alibaba.druid.pool.DruidAbstractDataSource-[1216] oracle.jdbc.driver.OracleDriver is deprecated.Having use oracle.jdbc.OracleDriver.
2021/01/18-16:57:54 [main] INFO  com.alibaba.druid.pool.DruidDataSource-[1003] {dataSource-1} inited
2021/01/18-16:57:54 [main] INFO  org.hibernate.jpa.internal.util.LogHelper-[31] HHH000204: Processing PersistenceUnitInfo [name: default]
2021/01/18-16:57:54 [main] INFO  org.hibernate.Version-[46] HHH000412: Hibernate Core {5.4.9.Final}
2021/01/18-16:57:55 [main] INFO  org.hibernate.annotations.common.Version-[66] HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2021/01/18-16:57:55 [main] INFO  org.hibernate.dialect.Dialect-[172] HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
2021/01/18-16:57:57 [main] INFO  org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator-[52] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2021/01/18-16:57:57 [main] INFO  org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean-[416] Initialized JPA EntityManagerFactory for persistence unit 'default'
2021/01/18-16:58:00 [main] WARN  org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration-[220] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2021/01/18-16:58:01 [main] INFO  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler-[60] Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2021/01/18-16:58:01 [main] INFO  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler-[60] Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2021/01/18-16:58:01 [main] INFO  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler-[83] Clear EntityHelper entityTableMap cache.
2021/01/18-16:58:01 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler-[171] Initializing ExecutorService 'taskScheduler'
2021/01/18-16:58:01 [main] INFO  org.apache.coyote.http11.Http11NioProtocol-[173] Starting ProtocolHandler ["http-nio-317"]
2021/01/18-16:58:01 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer-[204] Tomcat started on port(s): 317 (http) with context path ''
2021/01/18-16:58:01 [main] INFO  com.tuozhi.zhlw.admin.MyApplication-[61] Started MyApplication in 11.975 seconds (JVM running for 12.986)
2021/01/18-16:58:01 [main] DEBUG com.tuozhi.zhlw.admin.jc.mapper.BaseDeptMapper.getJCBDeptId-[159] ==>  Preparing: SELECT ID FROM CD_SYSTEM.SYS_DEPT WHERE DEPT_WORK = '1000002' 
2021/01/18-16:58:01 [main] DEBUG com.tuozhi.zhlw.admin.jc.mapper.BaseDeptMapper.getJCBDeptId-[159] ==> Parameters: 
2021/01/18-16:58:01 [main] DEBUG com.tuozhi.zhlw.admin.jc.mapper.BaseDeptMapper.getJCBDeptId-[159] <==      Total: 1
2021/01/18-16:58:01 [main] DEBUG com.tuozhi.zhlw.admin.jc.mapper.BaseDeptMapper.getIssuerDeptId-[159] ==>  Preparing: SELECT ID FROM CD_SYSTEM.SYS_DEPT WHERE DEPT_WORK = 'FX' 
2021/01/18-16:58:01 [main] DEBUG com.tuozhi.zhlw.admin.jc.mapper.BaseDeptMapper.getIssuerDeptId-[159] ==> Parameters: 
2021/01/18-16:58:01 [main] DEBUG com.tuozhi.zhlw.admin.jc.mapper.BaseDeptMapper.getIssuerDeptId-[159] <==      Total: 1
2021/01/18-17:01:31 [http-nio-317-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]-[173] Initializing Spring DispatcherServlet 'dispatcherServlet'
2021/01/18-17:01:31 [http-nio-317-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet-[525] Initializing Servlet 'dispatcherServlet'
2021/01/18-17:01:31 [http-nio-317-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet-[547] Completed initialization in 10 ms
2021/01/18-17:01:31 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-17:01:31 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-17:01:31 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-17:01:31 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/getNewVersionFilePath
2021/01/18-17:01:31 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-17:01:31 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAppETCCardController.getNewVersionFilePath
2021/01/18-17:01:31 [http-nio-317-exec-1] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[]
2021/01/18-17:01:31 [http-nio-317-exec-1] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAppETCCardMapper.getNewVersionFilePath-[159] ==>  Preparing: SELECT VERSION,URLPATH FROM CD_JC.JC_APP_VERSION where rownum=1 ORDER BY VERSION desc 
2021/01/18-17:01:31 [http-nio-317-exec-1] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAppETCCardMapper.getNewVersionFilePath-[159] ==> Parameters: 
2021/01/18-17:01:31 [http-nio-317-exec-1] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAppETCCardMapper.getNewVersionFilePath-[159] <==      Total: 1
2021/01/18-17:01:32 [http-nio-317-exec-2] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] ==>  Preparing: select t.ID as deptId,t.PARENT_ID as deptParentId,t.DEPT_NAME as deptName,t.DEPT_WORK as deptWork,u.LOGIN_NAME as loginName,u.USER_NAME as userName,u.PASSWORD as password,u.ID as userId,u.LAST_PASSWORD_MODIFY_TIME lastPasswordModifyTime,u.PASSWORD_HISTORY passwordHistory, t.PRIVILEGE_ID as privilegeId ,u.VALID_STATUS as validStatus,(select wm_concat(ROLE_ID) from SYS_USER_ROLES where USER_ID= u.ID) roleIds,t.DEPT_LONG_ID deptLongId, t.WORKFLOWDEPTROLE workFlowDeptRole from SYS_USERS u left join SYS_DEPT t on t.ID = u.DEPT_ID where u.LOGIN_NAME = ? 
2021/01/18-17:01:32 [http-nio-317-exec-2] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] ==> Parameters: 1111111(String)
2021/01/18-17:01:32 [http-nio-317-exec-2] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] <==      Total: 1
2021/01/18-17:01:32 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-17:01:32 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-17:01:32 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-17:01:32 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/getBlackOrGreyListByVehicle
2021/01/18-17:01:32 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-17:01:32 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController.getBlackListByVehicle
2021/01/18-17:01:32 [http-nio-317-exec-3] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[null]
2021/01/18-17:01:32 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalBlackList-[159] ==>  Preparing: SELECT jbr.REQUESTID, jbr.CARNUMBER, sed.ENUM_NAME CARCOLOUR, jbr.CARFEATURE, round( jbr.ELUDEMONEYNUMBER / 100, 2 ) ELUDEMONEYNUMBER, round( jbr.FACTMONEYNUMBER / 100, 2 ) FACTMONEYNUMBER, sed1.ENUM_NAME ELUDEMONEYTYPE, CASE WHEN jbr.ELUDEMONEYTYPE = 1001 THEN sed2.ENUM_NAME WHEN jbr.ELUDEMONEYTYPE = 1002 THEN sed3.ENUM_NAME WHEN jbr.ELUDEMONEYTYPE = 1003 THEN sed4.ENUM_NAME WHEN jbr.ELUDEMONEYTYPE = 1004 THEN sed5.ENUM_NAME END ELUDEMONEYTYPEITEMNAME, sed6.ENUM_NAME CARTYPE, jbr.AXLETYPE, bt2.NAME ENTRYSTATIONID, bt3.NAME EXITSTATIONID, to_char( jbr.ENTRYSTATIONTIME, 'yyyy-mm-dd HH24:mi:ss' ) ENTRYSTATIONTIME, to_char( jbr.EXITSTATIONTIME, 'yyyy-mm-dd HH24:mi:ss' ) EXITSTATIONTIME, nvl( jbr.TOTALWEIGHT, '' ) TOTALWEIGHT, decode( jbr.HAVECARD, 1, '是', 0, '否', '' ) HAVECARD, decode( jbr.HAVEDAMAGEDEVICE, 1, '有', 0, '无', '' ) HAVEDAMAGEDEVICE, decode( jbr.HAVEVIDEO, 1, '有', 0, '无', '' ) HAVEVIDEO, nvl( jbr.CPUCARDID, '' ) CPUCARDID, nvl( jbr.REQUESTDESCRIPTION, '' ) REQUESTDESCRIPTION, to_char( jbr.CREATETIME, 'yyyy-mm-dd HH24:mi:ss' ) CREATETIME, jbr.CREATEUSERNAME, sed7.dept_name CREATEDEPTID, nvl( jbr.SUMTOTAL, 0 ) SUMTOTAL, bd1.DEPT_NAME SERVICEDEPTNAME, jbr1.SREQUESTID 撤销状态, --有值已撤销，没有值未撤销 jbr.IS_APP, jbr.REQUESTSTATUS FROM cd_jc.JC_BLACKLIST_REQUEST jbr LEFT JOIN "CD_JC"."JC_BLACKLIST_REQUEST" jbr1 ON jbr1.SREQUESTID = jbr.REQUESTID AND jbr1.DELETEFLAG = 1 AND jbr1.LOGICTYPE = 2 INNER JOIN "CD_JC"."JC_BLACKLIST_FLOWPATH" jbf ON jbr.CURRENTFLOWPATHID = jbf.FLOWPATHID LEFT JOIN CD_SYSTEM.SYS_DEPT bd1 ON jbf.OPERATEDEPTID = bd1.ID LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed ON sed.ENUM_VALUE = jbr.CARCOLOUR AND sed.ENUM_ID = 39 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed1 ON sed1.ENUM_VALUE = jbr.ELUDEMONEYTYPE AND sed1.ENUM_ID = 87 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed2 ON sed2.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed2.ENUM_ID = 88 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed3 ON sed3.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed3.ENUM_ID = 89 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed4 ON sed4.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed4.ENUM_ID = 90 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed5 ON sed5.ENUM_VALUE = jbr.ELUDEMONEYTYPEITEM AND sed5.ENUM_ID = 91 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed6 ON sed6.ENUM_VALUE = jbr.CARTYPE AND sed6.ENUM_ID = 40 LEFT JOIN CD_SYSTEM.SYS_DEPT sed7 ON sed7.ID = jbr.CREATEDEPTID LEFT JOIN ( SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1' ) bt2 ON bt2.ID = jbr.ENTRYSTATIONID LEFT JOIN ( SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1' ) bt3 ON bt3.ID = jbr.EXITSTATIONID WHERE jbr.DELETEFLAG = 1 AND jbr.LOGICTYPE =1 and jbr.CREATETIME>=? and jbr.CREATETIME<=sysdate ORDER BY jbr.CREATETIME desc 
2021/01/18-17:01:32 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalBlackList-[159] ==> Parameters: 2021-01-18 00:00:00.0(Timestamp)
2021/01/18-17:01:33 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalBlackList-[159] <==      Total: 16
2021/01/18-17:01:33 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalGreyList-[159] ==>  Preparing: select t.REQUESTID,CARNUMBER,s2.ENUM_NAME LICENSECOLORID,CARFEATURE,round(ELUDEMONEYNUMBER/100,2) ELUDEMONEYNUMBER,round(FACTMONEYNUMBER/100,2) FACTMONEYNUMBER,s.ENUM_NAME ELUDEMONEYTYPE,s1.ENUM_NAME ELUDEMONEYTYPEITEM,s3.ENUM_NAME CARTYPE,AXLETYPE, bt2.NAME ENTRYSTATIONID, bt3.NAME EXITSTATIONID, to_char(ENTRYSTATIONTIME,'yyyy-mm-dd HH24:mi:ss') ENTRYSTATIONTIME,to_char(EXITSTATIONTIME,'yyyy-mm-dd HH24:mi:ss') EXITSTATIONTIME, nvl(TOTALWEIGHT,'') TOTALWEIGHT, decode(HAVECARD,1,'是',0,'否','') HAVECARD, decode(HAVEDAMAGEDEVICE,1,'有',0,'无','') HAVEDAMAGEDEVICE, decode(HAVEVIDEO,1,'有',0,'无','') HAVEVIDEO, nvl(CPUCARDID,'') CPUCARDID, nvl(REQUESTDESCRIPTION,'') REQUESTDESCRIPTION, to_char(t.CREATETIME,'yyyy-mm-dd HH24:mi:ss') CREATETIME, CREATEUSERNAME, s4.dept_name CREATEDEPTID, nvl(SUMTOTAL,0) SUMTOTAL, bd1.DEPT_NAME SERVICEDEPTNAME from cd_jc.JC_GRAYLIST_REQUEST t INNER JOIN "CD_JC"."JC_GRAYLIST_FLOWPATH" jbf ON t.CURRENTFLOWPATHID = jbf.FLOWPATHID LEFT JOIN CD_SYSTEM.SYS_DEPT bd1 ON jbf.DEPTID = bd1.DEPT_WORK LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s ON t.ELUDEMONEYTYPE = s.ENUM_VALUE and s.ENUM_ID = 43 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s1 ON t.ELUDEMONEYTYPEITEM = s1.ENUM_VALUE and s1.ENUM_ID = 44 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s2 ON t.LICENSECOLORID = s2.ENUM_VALUE and s2.ENUM_ID = 39 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS s3 ON s3.ENUM_VALUE = t.CARTYPE AND s3.ENUM_ID = 40 LEFT JOIN CD_SYSTEM.SYS_DEPT s4 ON to_char(s4.ID) = t.CREATEDEPTID LEFT JOIN (SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1') bt2 ON bt2.ID = t.ENTRYSTATIONID LEFT JOIN (SELECT x.* FROM CD_PASS.BASIC_BASICINFODOWN_RES x WHERE x.downid = ( SELECT max( w.down_id ) FROM CD_PASS.CLEAR_DOWNLOAD_LOG w WHERE w.read_result = 1 AND w.file_type = 24 ) AND x.TYPE = '1') bt3 ON bt3.ID = t.EXITSTATIONID where t.CREATETIME>=? and t.CREATETIME<=sysdate order by t.CREATETIME desc 
2021/01/18-17:01:33 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalGreyList-[159] ==> Parameters: 2021-01-18 00:00:00.0(Timestamp)
2021/01/18-17:01:36 [http-nio-317-exec-3] DEBUG com.tuozhi.zhlw.admin.jcApp.mapper.JCAuditStatusMapper.getLocalGreyList-[159] <==      Total: 5
2021/01/18-17:01:39 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-17:01:39 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-17:01:39 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-17:01:39 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/getEtcCardBlackList
2021/01/18-17:01:39 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-17:01:39 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController.getEtcCardBlackList
2021/01/18-17:01:39 [http-nio-317-exec-4] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[津RUQ995]
2021/01/18-17:01:39 [http-nio-317-exec-4] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] ==>  Preparing: select t.REQUESTORDERID, sed.enum_name OICARUSERTYPE, ttt.OICARTONNAGE, ttt.OICARAXIES, ttt.OICARWIDTH, ttt.OICARLENGTH, ttt.OIHEADSTOCKHEIGHT, to_char(t.saledate, 'yyyy-mm-dd HH24:mi:ss') saledate, t.cpucardid cpucardid, ttt.oiid oiid, s.codename codename, t.plateno plateno, s1.codename cardvehiclecolor, s2.codename cardvehicletype, decode(t.cardstate, 1,'待激活', 3, '发行', 4, '挂失', 5,'黑名单（欠费）', 6, '无卡挂起', 7,'有卡挂起',8,'无卡注销', 9, '有卡注销' ) cardstate, bc.codename cardblacklisttype, to_char(bc.createdate, 'yyyy-mm-dd hh24:mi:ss') createdate, ttt.oiplateno oiplateno, ttt.oiplatecolor oiplatecolor, ttt.oicarcategory oicarcategory, decode(ttt.oistate, 3, '在用', 4, '挂失', 6, '车型不符', 9, '注销', '不可用') oistate, t.ownername ownername, i.ciclientname as ciclientname, i.cimobile as cimobile, i.citel citel, i.ciidcard ciidcard, i.cilinkman cilinkman, t.clientid clientid, ebo.OFFICENAME, su.username, eocrt.oiid oiidtemp, evi.approvedcount, (select to_char(max(aecr.avt_inserttime), 'yyyy-mm-dd HH24:mi:ss') from avt_etc_card_client_rel@db_link_2310etc aecr where aecr.plateno=t.plateno and aecr.platenocolor=t.platenocolor) aecrsaledate, (select to_char(max(aeocr.avt_inserttime), 'yyyy-mm-dd HH24:mi:ss') from avt_etc_obu_client_rel@db_link_2310etc aeocr where aeocr.oiplateno=t.plateno and aeocr.oiplatecolor=t.platenocolor) aeocrsaledate from etc_card_client_rel@db_link_2310etc t left join etc_vehicle_info@db_link_2310etc evi on evi.plateno=t.plateno and evi.platenocolor=t.platenocolor left join ETC_OBU_CLIENT_REL_TEMP@db_link_2310etc eocrt on eocrt.oiplateno=t.plateno left join ETC_BUSINESS_OFFICE@db_link_2310etc ebo on t.OFFICEID=ebo.id left join etcv3_sys_user@db_link_2310etc su on t.userid=su.id left join etc_client_info@db_link_2310etc i on t.clientid = i.id left join (select tt.oiid, tt.oiplateno, o1.codename as oiplatecolor, o2.codename as oicarcategory, tt.oistate, tt.oiplatecolor as platecolor, tt.OICARTONNAGE, tt.OICARUSERTYPE, tt.OICARAXIES, tt.OICARWIDTH, tt.OICARLENGTH, tt.OIHEADSTOCKHEIGHT from etc_obu_client_rel@db_link_2310etc tt left join etc_system_code@db_link_2310etc o1 on o1.codevalue = tt.oiplatecolor and o1.typeid = 12 left join etc_system_code@db_link_2310etc o2 on o2.codevalue = tt.oicarcategory and o2.typeid = 13) ttt on ttt.oiplateno = t.plateno and ttt.platecolor = t.platenocolor left join (select b.cpucardid, b.createdate, bs.codename from etc_card_blacklist@db_link_2310etc b left join etc_system_code@db_link_2310etc bs on b.blacklisttype = bs.codevalue and bs.typeid = 43) bc on t.cpucardid = bc.cpucardid left join etc_system_code@db_link_2310etc s on s.codevalue = nvl(t.sendid, '1001002210001001') and s.typeid = 62 left join etc_system_code@db_link_2310etc s1 on s1.codevalue = t.platenocolor and s1.typeid = 12 left join etc_system_code@db_link_2310etc s2 on s2.codevalue = t.carcategory and s2.typeid = 13 LEFT JOIN CD_SYSTEM.SYS_ENUM_DETAILS sed ON ttt.OICARUSERTYPE = sed.ENUM_VALUE and sed.ENUM_ID = 41 WHERE t.plateno =? OR t.CPUCARDID=? 
2021/01/18-17:01:39 [http-nio-317-exec-4] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] ==> Parameters: 津RUQ995(String), 津RUQ995(String)
2021/01/18-17:01:43 [http-nio-317-exec-4] DEBUG com.tuozhi.zhlw.admin.jc.mapper.EtcCardBlackListMapper.findAll-[159] <==      Total: 1
2021/01/18-17:02:00 [http-nio-317-exec-5] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] ==>  Preparing: select t.ID as deptId,t.PARENT_ID as deptParentId,t.DEPT_NAME as deptName,t.DEPT_WORK as deptWork,u.LOGIN_NAME as loginName,u.USER_NAME as userName,u.PASSWORD as password,u.ID as userId,u.LAST_PASSWORD_MODIFY_TIME lastPasswordModifyTime,u.PASSWORD_HISTORY passwordHistory, t.PRIVILEGE_ID as privilegeId ,u.VALID_STATUS as validStatus,(select wm_concat(ROLE_ID) from SYS_USER_ROLES where USER_ID= u.ID) roleIds,t.DEPT_LONG_ID deptLongId, t.WORKFLOWDEPTROLE workFlowDeptRole from SYS_USERS u left join SYS_DEPT t on t.ID = u.DEPT_ID where u.LOGIN_NAME = ? 
2021/01/18-17:02:00 [http-nio-317-exec-5] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] ==> Parameters: 1111111(String)
2021/01/18-17:02:00 [http-nio-317-exec-5] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] <==      Total: 1
2021/01/18-17:02:00 [http-nio-317-exec-5] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[51] 方法执行前执行。。。。。before
2021/01/18-17:02:00 [http-nio-317-exec-5] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[52] <============================================
2021/01/18-17:02:00 [http-nio-317-exec-5] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[53] 请求来源： =》192.168.3.5
2021/01/18-17:02:00 [http-nio-317-exec-5] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[54] 请求URL：=》/JC/APP/addOperationLogFiles
2021/01/18-17:02:00 [http-nio-317-exec-5] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[55] 请求方式：=》POST
2021/01/18-17:02:00 [http-nio-317-exec-5] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[56] 响应方法：=》com.tuozhi.zhlw.admin.jcApp.controller.JCAuditStatusController.addOperationLogFiles
2021/01/18-17:02:00 [http-nio-317-exec-5] INFO  com.tuozhi.zhlw.admin.jcApp.config.SysLoginAspect-[57] 请求参数：=》[津RUQ995, 0, 1111111, [Lorg.springframework.web.multipart.MultipartFile;@19bae285]
2021/01/18-17:02:00 [http-nio-317-exec-5] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] ==>  Preparing: select t.ID as deptId,t.PARENT_ID as deptParentId,t.DEPT_NAME as deptName,t.DEPT_WORK as deptWork,u.LOGIN_NAME as loginName,u.USER_NAME as userName,u.PASSWORD as password,u.ID as userId,u.LAST_PASSWORD_MODIFY_TIME lastPasswordModifyTime,u.PASSWORD_HISTORY passwordHistory, t.PRIVILEGE_ID as privilegeId ,u.VALID_STATUS as validStatus,(select wm_concat(ROLE_ID) from SYS_USER_ROLES where USER_ID= u.ID) roleIds,t.DEPT_LONG_ID deptLongId, t.WORKFLOWDEPTROLE workFlowDeptRole from SYS_USERS u left join SYS_DEPT t on t.ID = u.DEPT_ID where u.LOGIN_NAME = ? 
2021/01/18-17:02:00 [http-nio-317-exec-5] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] ==> Parameters: 1111111(String)
2021/01/18-17:02:00 [http-nio-317-exec-5] DEBUG com.tuozhi.zhlw.admin.mapper.LoginMapper.findBaseUserByLoginName-[159] <==      Total: 1
2021/01/18-17:02:00 [http-nio-317-exec-5] DEBUG com.tuozhi.zhlw.admin.jc.mapper.JcLogMapper.addOperationLogFiles-[159] ==>  Preparing: begin insert into CD_JC.JC_OPERATIONLOGFILES values ( to_number(TO_CHAR(sysdate,'yyyymmdd')||TO_CHAR(CD_JC.SEQ_JC_OPERATIONLOGFILES.NEXTVAL)), ?, ?, ?, ?, ?, ?, sysdate ); end; 
2021/01/18-17:02:03 [http-nio-317-exec-5] DEBUG com.tuozhi.zhlw.admin.jc.mapper.JcLogMapper.addOperationLogFiles-[159] ==> Parameters: tring), 3(Integer), 稽查部收费站小号(String), 稽查部收费站级别(String), 津RUQ995(String), 0(Integer)
2021/01/18-18:03:32 [SpringContextShutdownHook] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler-[208] Shutting down ExecutorService 'taskScheduler'
2021/01/18-18:03:32 [SpringContextShutdownHook] INFO  org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean-[598] Closing JPA EntityManagerFactory for persistence unit 'default'
2021/01/18-18:03:32 [SpringContextShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource-[1965] {dataSource-1} closing ...
2021/01/18-18:03:32 [SpringContextShutdownHook] WARN  com.alibaba.druid.pool.DruidDataSource-[2012] close connection error
java.sql.SQLRecoverableException: IO 错误: Connection reset by peer: socket write error
	at oracle.jdbc.driver.T4CConnection.logoff(T4CConnection.java:857)
	at oracle.jdbc.driver.PhysicalConnection.close(PhysicalConnection.java:2498)
	at com.alibaba.druid.filter.FilterChainImpl.connection_close(FilterChainImpl.java:186)
	at com.alibaba.druid.filter.stat.StatFilter.connection_close(StatFilter.java:261)
	at com.alibaba.druid.filter.FilterChainImpl.connection_close(FilterChainImpl.java:181)
	at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.close(ConnectionProxyImpl.java:114)
	at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:2010)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
Caused by: java.net.SocketException: Connection reset by peer: socket write error
	at java.net.SocketOutputStream.socketWrite0(Native Method)
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:111)
	at java.net.SocketOutputStream.write(SocketOutputStream.java:155)
	at oracle.net.ns.DataPacket.send(DataPacket.java:209)
	at oracle.net.ns.NetOutputStream.flush(NetOutputStream.java:215)
	at oracle.net.ns.NetInputStream.getNextPacket(NetInputStream.java:302)
	at oracle.net.ns.NetInputStream.read(NetInputStream.java:249)
	at oracle.net.ns.NetInputStream.read(NetInputStream.java:171)
	at oracle.net.ns.NetInputStream.read(NetInputStream.java:89)
	at oracle.jdbc.driver.T4CSocketInputStreamWrapper.readNextPacket(T4CSocketInputStreamWrapper.java:123)
	at oracle.jdbc.driver.T4CSocketInputStreamWrapper.read(T4CSocketInputStreamWrapper.java:79)
	at oracle.jdbc.driver.T4CMAREngineStream.unmarshalUB1(T4CMAREngineStream.java:429)
	at oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:397)
	at oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:257)
	at oracle.jdbc.driver.T4C7Ocommoncall.doOLOGOFF(T4C7Ocommoncall.java:59)
	at oracle.jdbc.driver.T4CConnection.logoff(T4CConnection.java:844)
	... 20 common frames omitted
2021/01/18-18:03:32 [SpringContextShutdownHook] WARN  com.alibaba.druid.pool.DruidDataSource-[2012] close connection error
java.sql.SQLRecoverableException: IO 错误: Connection reset by peer: socket write error
	at oracle.jdbc.driver.T4CConnection.logoff(T4CConnection.java:857)
	at oracle.jdbc.driver.PhysicalConnection.close(PhysicalConnection.java:2498)
	at com.alibaba.druid.filter.FilterChainImpl.connection_close(FilterChainImpl.java:186)
	at com.alibaba.druid.filter.stat.StatFilter.connection_close(StatFilter.java:261)
	at com.alibaba.druid.filter.FilterChainImpl.connection_close(FilterChainImpl.java:181)
	at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.close(ConnectionProxyImpl.java:114)
	at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:2010)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
Caused by: java.net.SocketException: Connection reset by peer: socket write error
	at java.net.SocketOutputStream.socketWrite0(Native Method)
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:111)
	at java.net.SocketOutputStream.write(SocketOutputStream.java:155)
	at oracle.net.ns.DataPacket.send(DataPacket.java:209)
	at oracle.net.ns.NetOutputStream.flush(NetOutputStream.java:215)
	at oracle.net.ns.NetInputStream.getNextPacket(NetInputStream.java:302)
	at oracle.net.ns.NetInputStream.read(NetInputStream.java:249)
	at oracle.net.ns.NetInputStream.read(NetInputStream.java:171)
	at oracle.net.ns.NetInputStream.read(NetInputStream.java:89)
	at oracle.jdbc.driver.T4CSocketInputStreamWrapper.readNextPacket(T4CSocketInputStreamWrapper.java:123)
	at oracle.jdbc.driver.T4CSocketInputStreamWrapper.read(T4CSocketInputStreamWrapper.java:79)
	at oracle.jdbc.driver.T4CMAREngineStream.unmarshalUB1(T4CMAREngineStream.java:429)
	at oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:397)
	at oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:257)
	at oracle.jdbc.driver.T4C7Ocommoncall.doOLOGOFF(T4C7Ocommoncall.java:59)
	at oracle.jdbc.driver.T4CConnection.logoff(T4CConnection.java:844)
	... 20 common frames omitted
2021/01/18-18:03:32 [SpringContextShutdownHook] WARN  com.alibaba.druid.pool.DruidDataSource-[2012] close connection error
java.sql.SQLRecoverableException: IO 错误: Connection reset by peer: socket write error
	at oracle.jdbc.driver.T4CConnection.logoff(T4CConnection.java:857)
	at oracle.jdbc.driver.PhysicalConnection.close(PhysicalConnection.java:2498)
	at com.alibaba.druid.filter.FilterChainImpl.connection_close(FilterChainImpl.java:186)
	at com.alibaba.druid.filter.stat.StatFilter.connection_close(StatFilter.java:261)
	at com.alibaba.druid.filter.FilterChainImpl.connection_close(FilterChainImpl.java:181)
	at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.close(ConnectionProxyImpl.java:114)
	at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:2010)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
Caused by: java.net.SocketException: Connection reset by peer: socket write error
	at java.net.SocketOutputStream.socketWrite0(Native Method)
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:111)
	at java.net.SocketOutputStream.write(SocketOutputStream.java:155)
	at oracle.net.ns.DataPacket.send(DataPacket.java:209)
	at oracle.net.ns.NetOutputStream.flush(NetOutputStream.java:215)
	at oracle.net.ns.NetInputStream.getNextPacket(NetInputStream.java:302)
	at oracle.net.ns.NetInputStream.read(NetInputStream.java:249)
	at oracle.net.ns.NetInputStream.read(NetInputStream.java:171)
	at oracle.net.ns.NetInputStream.read(NetInputStream.java:89)
	at oracle.jdbc.driver.T4CSocketInputStreamWrapper.readNextPacket(T4CSocketInputStreamWrapper.java:123)
	at oracle.jdbc.driver.T4CSocketInputStreamWrapper.read(T4CSocketInputStreamWrapper.java:79)
	at oracle.jdbc.driver.T4CMAREngineStream.unmarshalUB1(T4CMAREngineStream.java:429)
	at oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:397)
	at oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:257)
	at oracle.jdbc.driver.T4C7Ocommoncall.doOLOGOFF(T4C7Ocommoncall.java:59)
	at oracle.jdbc.driver.T4CConnection.logoff(T4CConnection.java:844)
	... 20 common frames omitted
2021/01/18-18:03:32 [SpringContextShutdownHook] WARN  com.alibaba.druid.pool.DruidDataSource-[2012] close connection error
java.sql.SQLRecoverableException: IO 错误: Connection reset by peer: socket write error
	at oracle.jdbc.driver.T4CConnection.logoff(T4CConnection.java:857)
	at oracle.jdbc.driver.PhysicalConnection.close(PhysicalConnection.java:2498)
	at com.alibaba.druid.filter.FilterChainImpl.connection_close(FilterChainImpl.java:186)
	at com.alibaba.druid.filter.stat.StatFilter.connection_close(StatFilter.java:261)
	at com.alibaba.druid.filter.FilterChainImpl.connection_close(FilterChainImpl.java:181)
	at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.close(ConnectionProxyImpl.java:114)
	at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:2010)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
Caused by: java.net.SocketException: Connection reset by peer: socket write error
	at java.net.SocketOutputStream.socketWrite0(Native Method)
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:111)
	at java.net.SocketOutputStream.write(SocketOutputStream.java:155)
	at oracle.net.ns.DataPacket.send(DataPacket.java:209)
	at oracle.net.ns.NetOutputStream.flush(NetOutputStream.java:215)
	at oracle.net.ns.NetInputStream.getNextPacket(NetInputStream.java:302)
	at oracle.net.ns.NetInputStream.read(NetInputStream.java:249)
	at oracle.net.ns.NetInputStream.read(NetInputStream.java:171)
	at oracle.net.ns.NetInputStream.read(NetInputStream.java:89)
	at oracle.jdbc.driver.T4CSocketInputStreamWrapper.readNextPacket(T4CSocketInputStreamWrapper.java:123)
	at oracle.jdbc.driver.T4CSocketInputStreamWrapper.read(T4CSocketInputStreamWrapper.java:79)
	at oracle.jdbc.driver.T4CMAREngineStream.unmarshalUB1(T4CMAREngineStream.java:429)
	at oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:397)
	at oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:257)
	at oracle.jdbc.driver.T4C7Ocommoncall.doOLOGOFF(T4C7Ocommoncall.java:59)
	at oracle.jdbc.driver.T4CConnection.logoff(T4CConnection.java:844)
	... 20 common frames omitted
2021/01/18-18:03:32 [SpringContextShutdownHook] WARN  com.alibaba.druid.pool.DruidDataSource-[2012] close connection error
java.sql.SQLRecoverableException: IO 错误: Connection reset by peer: socket write error
	at oracle.jdbc.driver.T4CConnection.logoff(T4CConnection.java:857)
	at oracle.jdbc.driver.PhysicalConnection.close(PhysicalConnection.java:2498)
	at com.alibaba.druid.filter.FilterChainImpl.connection_close(FilterChainImpl.java:186)
	at com.alibaba.druid.filter.stat.StatFilter.connection_close(StatFilter.java:261)
	at com.alibaba.druid.filter.FilterChainImpl.connection_close(FilterChainImpl.java:181)
	at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.close(ConnectionProxyImpl.java:114)
	at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:2010)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
Caused by: java.net.SocketException: Connection reset by peer: socket write error
	at java.net.SocketOutputStream.socketWrite0(Native Method)
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:111)
	at java.net.SocketOutputStream.write(SocketOutputStream.java:155)
	at oracle.net.ns.DataPacket.send(DataPacket.java:209)
	at oracle.net.ns.NetOutputStream.flush(NetOutputStream.java:215)
	at oracle.net.ns.NetInputStream.getNextPacket(NetInputStream.java:302)
	at oracle.net.ns.NetInputStream.read(NetInputStream.java:249)
	at oracle.net.ns.NetInputStream.read(NetInputStream.java:171)
	at oracle.net.ns.NetInputStream.read(NetInputStream.java:89)
	at oracle.jdbc.driver.T4CSocketInputStreamWrapper.readNextPacket(T4CSocketInputStreamWrapper.java:123)
	at oracle.jdbc.driver.T4CSocketInputStreamWrapper.read(T4CSocketInputStreamWrapper.java:79)
	at oracle.jdbc.driver.T4CMAREngineStream.unmarshalUB1(T4CMAREngineStream.java:429)
	at oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:397)
	at oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:257)
	at oracle.jdbc.driver.T4C7Ocommoncall.doOLOGOFF(T4C7Ocommoncall.java:59)
	at oracle.jdbc.driver.T4CConnection.logoff(T4CConnection.java:844)
	... 20 common frames omitted
2021/01/18-18:03:32 [SpringContextShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource-[2037] {dataSource-1} closed
